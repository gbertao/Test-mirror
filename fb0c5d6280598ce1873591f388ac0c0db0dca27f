{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7b6e2f3c_e392dab5",
        "filename": "private/dumpstate.te",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2022-09-21T14:33:38Z",
      "side": 1,
      "message": "What\u0027s this for?",
      "revId": "fb0c5d6280598ce1873591f388ac0c0db0dca27f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a24ad3f_3c4c7a52",
        "filename": "private/dumpstate.te",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2022-09-21T14:37:50Z",
      "side": 1,
      "message": "When dumpstate runs `derive_sdk --dump`, derive_sdk will traverse /apex/**/sdkinfo.pb (like it does when calculating what to set the system properties to).",
      "parentUuid": "7b6e2f3c_e392dab5",
      "revId": "fb0c5d6280598ce1873591f388ac0c0db0dca27f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caba5b89_51f5752e",
        "filename": "private/dumpstate.te",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2022-09-22T09:40:39Z",
      "side": 1,
      "message": "sorry if I\u0027m being thick, but are selinux policies transitive like that? Seems hugely impractical : if we change what derive_sdk needs to do we need to update two policies. Is there a way to inherit derive_sdk\u0027s existing privileges?",
      "parentUuid": "4a24ad3f_3c4c7a52",
      "revId": "fb0c5d6280598ce1873591f388ac0c0db0dca27f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ad7bff3_e9e9473f",
        "filename": "private/dumpstate.te",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2022-09-26T09:50:14Z",
      "side": 1,
      "message": "`domain_auto_trans(dumpstate, derive_sdk_exec, derive_sdk)` looks like the correct function. It does require additional rules to allow derive_sdk to write to the file descriptor inherited from dumpstate as part of the fork + exec, and becomes a bit messy. Cf other tools executed from dumpstate (`rg -g\u0027!prebuilts\u0027 -F -e \u0027domain_auto_trans(dumpstate,\u0027`).",
      "parentUuid": "caba5b89_51f5752e",
      "revId": "fb0c5d6280598ce1873591f388ac0c0db0dca27f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "280980b8_46938a60",
        "filename": "private/dumpstate.te",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2022-09-26T10:26:19Z",
      "side": 1,
      "message": "looks like incidentd has those rules but not the other ones (su, vdc, perfetto)? I don\u0027t really understand this",
      "parentUuid": "9ad7bff3_e9e9473f",
      "revId": "fb0c5d6280598ce1873591f388ac0c0db0dca27f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37f324a9_f88cd9e9",
        "filename": "private/dumpstate.te",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2022-09-28T06:54:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "280980b8_46938a60",
      "revId": "fb0c5d6280598ce1873591f388ac0c0db0dca27f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}