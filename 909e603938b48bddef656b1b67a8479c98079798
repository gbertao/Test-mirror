{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f25053be_f5b0cd89",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1115498
      },
      "writtenOn": "2022-12-12T22:32:22Z",
      "side": 1,
      "message": "Then what does the `ro.fuse.bpf.enabled` flag above it signal?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 55
      },
      "revId": "909e603938b48bddef656b1b67a8479c98079798",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86f0588b_b2bc9f42",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1045980
      },
      "writtenOn": "2022-12-12T23:22:11Z",
      "side": 1,
      "message": "ro.fuse.bpf.enabled indicates if the device is set to use fuse-bpf by default. There is a persist override that can cause fuse-bpf to be off even if ro.fuse.bpf-enabled is true. It also would not work if the feature is not available in the kernel.",
      "parentUuid": "f25053be_f5b0cd89",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 55
      },
      "revId": "909e603938b48bddef656b1b67a8479c98079798",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fab3cb5c_50277dd5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1115498
      },
      "writtenOn": "2022-12-12T23:32:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86f0588b_b2bc9f42",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 55
      },
      "revId": "909e603938b48bddef656b1b67a8479c98079798",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56c1ae08_2a9a8f32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1045980
      },
      "writtenOn": "2022-12-12T23:25:15Z",
      "side": 1,
      "message": "Having \u0027state\u0027 be true or false feels strange to me. I\u0027d expect to see something like \"running\" or \"disabled\" based on that name. I\u0027m not sure of a better name offhand though.",
      "revId": "909e603938b48bddef656b1b67a8479c98079798",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dee1bed4_17186053",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1044551
      },
      "writtenOn": "2022-12-13T00:55:58Z",
      "side": 1,
      "message": "A lot of our property stuff deals nicely with bools, so keeping it true/false is certainly easier and less error prone ...",
      "parentUuid": "56c1ae08_2a9a8f32",
      "revId": "909e603938b48bddef656b1b67a8479c98079798",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddf144fc_e72b0dce",
        "filename": "private/property_contexts",
        "patchSetId": 1
      },
      "lineNbr": 645,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-12-13T00:32:37Z",
      "side": 1,
      "message": "a `bool` property having a name `state` sounds a bit odd to me. What exactly does this encode?",
      "range": {
        "startLine": 645,
        "startChar": 55,
        "endLine": 645,
        "endChar": 59
      },
      "revId": "909e603938b48bddef656b1b67a8479c98079798",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c12e2895_0afb80c8",
        "filename": "private/property_contexts",
        "patchSetId": 1
      },
      "lineNbr": 645,
      "author": {
        "id": 1044551
      },
      "writtenOn": "2022-12-13T00:55:58Z",
      "side": 1,
      "message": "Whether or not fuse-bpf, the feature, is running.\n\nWhat if I change it to ro.fuse.bpf.is_running? Would people be happier?",
      "parentUuid": "ddf144fc_e72b0dce",
      "range": {
        "startLine": 645,
        "startChar": 55,
        "endLine": 645,
        "endChar": 59
      },
      "revId": "909e603938b48bddef656b1b67a8479c98079798",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2424ba8_6a266ee4",
        "filename": "private/property_contexts",
        "patchSetId": 1
      },
      "lineNbr": 645,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-12-13T01:09:00Z",
      "side": 1,
      "message": "Yeah, `is_running` sounds much better. But then I wonder if we can get the same information in another way: by calling some syscalls or reading some /sys or /proc nodes.",
      "parentUuid": "c12e2895_0afb80c8",
      "range": {
        "startLine": 645,
        "startChar": 55,
        "endLine": 645,
        "endChar": 59
      },
      "revId": "909e603938b48bddef656b1b67a8479c98079798",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3cf0efe1_e259325c",
        "filename": "private/property_contexts",
        "patchSetId": 1
      },
      "lineNbr": 645,
      "author": {
        "id": 1044551
      },
      "writtenOn": "2022-12-13T01:34:06Z",
      "side": 1,
      "message": "The point of this flag is to encode the decision as to whether fuse_bpf is running into one place in vold, then to be able to securely test for it later. The logic for whether or not fuse bpf is running is not complex, but not quite trivial, and also changing.",
      "parentUuid": "d2424ba8_6a266ee4",
      "range": {
        "startLine": 645,
        "startChar": 55,
        "endLine": 645,
        "endChar": 59
      },
      "revId": "909e603938b48bddef656b1b67a8479c98079798",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}