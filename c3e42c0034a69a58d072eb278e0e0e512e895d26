{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "76d4d389_57ce776d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1561651
      },
      "writtenOn": "2021-08-09T08:34:02Z",
      "side": 1,
      "message": "While the bug was created for /proc/uptime explicitly, the comment on this rule appears to cover a wider set of cases (i.e., /proc/* file descriptors passed through exec()). Jeff, was there other examples of access denials for us to keep this dontaudit?",
      "revId": "c3e42c0034a69a58d072eb278e0e0e512e895d26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "879694ce_6ce653d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1880185
      },
      "writtenOn": "2021-08-20T16:36:09Z",
      "side": 1,
      "message": "@jeffv",
      "revId": "c3e42c0034a69a58d072eb278e0e0e512e895d26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f6e86a4_044763a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2021-08-20T16:40:35Z",
      "side": 1,
      "message": "This doesn\u0027t solve the problem of crash_dump not reporting proc_uptime. Instead of making crash_dump spammy and our tests flaky (i.e. this change), why not grant the proper permission? e.g.\n\nallow crash_dump proc_uptime:file r_file_perms;",
      "revId": "c3e42c0034a69a58d072eb278e0e0e512e895d26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "491c5e00_0e2fffd0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1880185
      },
      "writtenOn": "2021-08-20T16:45:27Z",
      "side": 1,
      "message": "@jeffv\n\n Pls read https://android-review.googlesource.com/c/platform/system/sepolicy/+/1789687\nAnd that was merged already.\nWe need to revert this to avoid hiding problems",
      "parentUuid": "8f6e86a4_044763a6",
      "revId": "c3e42c0034a69a58d072eb278e0e0e512e895d26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdc263b9_ac1ced81",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2021-08-20T17:04:06Z",
      "side": 1,
      "message": "I\u0027d still prefer to keep this dontaudit. Otherwise any crashing process that holds a file from /proc will cause a denial \u0026 test flake. It seems like the actual issue is that aosp/1612831 was submitted without actually being tested?",
      "parentUuid": "491c5e00_0e2fffd0",
      "revId": "c3e42c0034a69a58d072eb278e0e0e512e895d26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baed01dc_84991348",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1880185
      },
      "writtenOn": "2021-08-20T17:13:26Z",
      "side": 1,
      "message": "Might be aosp/1612831  was only tested  with SELinux permissive  disabled.\nI don\u0027t understand why a  crashing process  holds a file from /proc would  related to the crash_dump and cause a denial . Do you have a sample executable to support that ?",
      "parentUuid": "bdc263b9_ac1ced81",
      "revId": "c3e42c0034a69a58d072eb278e0e0e512e895d26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae328a5d_e80c5121",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2021-08-20T17:33:36Z",
      "side": 1,
      "message": "A change tested in permissive mode isn\u0027t tested.\n\n\u003e Do you have a sample executable\nThis is the default behavior on Linux. From https://man7.org/linux/man-pages/man2/open.2.html:\n\"By default, the new file descriptor is set to remain open across an execve(2)\"\n\nSo what happens is:\n- Crash_dump is run when a crashing process execs /system/bin/crash_dump\n- The default behavior on Linux is that FDs are passed across exec. So any FDs held by the crashing process are automatically passed to crash_dump.\n- If crash_dump doesn\u0027t have access to the FD (which is the normal case) then an selinux denial occurs.\n- If an selinux denial occurs during testing, then there is a test failure, and folks have their time wasted on flaky presubmit.\n\nWe don\u0027t know what FDs a process holds, so we want crash_dumps\u0027s dontaudits to be broad because otherwise we get test flakes for things that crash_dump should not be doing. In the rare case (like this) where crash_dump actually should have access to a file, the solution is for the change adding that behavior to be properly tested.",
      "parentUuid": "baed01dc_84991348",
      "revId": "c3e42c0034a69a58d072eb278e0e0e512e895d26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7b66e14_6bfdda22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1880185
      },
      "writtenOn": "2021-08-20T18:26:14Z",
      "side": 1,
      "message": "I don\u0027t think your statement is correct.\nSince it is not only /proc that the process might hold, it can hold many other FDs too during a crash. Does that mean we need to add dontaudit  to all files to crash_dump.\n\nAnd I wrote a test executable to open a proc file (zoneinfo) which is in proc_zoneinfo domain and crash_dump does not have selinux policy for that. \n\nint main()\n{\n  char *p \u003d (char*)1;\n  int fd \u003d open(\"/proc/zoneinfo\",O_RDONLY);\n  if(fd \u003d\u003d -1) {\n     printf(\"cannot open\\n\");\n     return 1;\n  }\n  *p \u003d 123;\n\n  close(fd);\n}\n\nI did not see any avc denial from crash_dump with this CL. Since the crash_dump will not use the fd carried from the crashed process and wouldn\u0027t cause avc denied.",
      "parentUuid": "ae328a5d_e80c5121",
      "revId": "c3e42c0034a69a58d072eb278e0e0e512e895d26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "648bc2c5_d1355ecd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-08-20T23:35:52Z",
      "side": 1,
      "message": "\u003e Since the crash_dump will not use the fd carried from the crashed process and wouldn\u0027t cause avc denied.\n\nyeah, that\u0027s how i thought this worked too --- everything\u0027s fine as long as the child doesn\u0027t _use_ the fd?\n\n(anything else seems basically impossible to enforce since O_CLOEXEC isn\u0027t the default, and is relatively rarely used outside of code that\u0027s deliberately being careful about such things.)\n\nseems like making _all_ /proc fds okay isn\u0027t what we want here though? isn\u0027t the usual trick just to make up a new label for this file, and then allow that?",
      "parentUuid": "e7b66e14_6bfdda22",
      "revId": "c3e42c0034a69a58d072eb278e0e0e512e895d26",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}