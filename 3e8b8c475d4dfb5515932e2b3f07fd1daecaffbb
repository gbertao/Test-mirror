{
  "comments": [
    {
      "key": {
        "uuid": "85b99f2f_e66b3848",
        "filename": "private/traced_probes.te",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2018-11-16T14:05:58Z",
      "side": 1,
      "message": "I don\u0027t think this comment is right, since linker64 won\u0027t have the traced_probes label. And you don\u0027t need to include the denial in the comment anyway.\nI\u0027m not sure what it was needed for before, but I believe you now need it to allow atrace to inherit the fd for stderr.\nAlso: This rule should be in atrace.te not traced_probes.te, probably next to the one you\u0027re just adding.",
      "range": {
        "startLine": 59,
        "startChar": 49,
        "endLine": 60,
        "endChar": 0
      },
      "revId": "3e8b8c475d4dfb5515932e2b3f07fd1daecaffbb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91d3c98d_60436f3a",
        "filename": "private/traced_probes.te",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1080238
      },
      "writtenOn": "2018-11-16T14:47:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85b99f2f_e66b3848",
      "range": {
        "startLine": 59,
        "startChar": 49,
        "endLine": 60,
        "endChar": 0
      },
      "revId": "3e8b8c475d4dfb5515932e2b3f07fd1daecaffbb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73b39cdb_49f9f49b",
        "filename": "private/traced_probes.te",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2018-11-16T15:12:43Z",
      "side": 1,
      "message": "SELinux labels are attached to individual file descriptors, as well as the object the object the file descriptor points to. The file descriptor label is determined by the label of the process creating the file descriptor, eg, if a process labeled traced_probes creates file descriptors, then the file descriptor label is also traced_probes.\n\nWhen a process execve()s another process, file descriptors are transferred from parent to child at execve() time, before the child process ever starts running. Two permission checks are performed:\n\n1) Does the child have permission to use file descriptors created by the process?\n2) Does the child have permission to access the object pointed to by the file descriptor?\n\nIf the child isn\u0027t authorized to handle the file descriptor, the file descriptor is replaced by a file descriptor to /sys/fs/selinux/null (same as /dev/null).\n\nIn the above case, path\u003d\"/system/bin/linker64\" is technically correct. At the time the file descriptor is transferred, the child process isn\u0027t yet running, and the entrypoint for the process is the dynamic linker.",
      "parentUuid": "91d3c98d_60436f3a",
      "range": {
        "startLine": 59,
        "startChar": 49,
        "endLine": 60,
        "endChar": 0
      },
      "revId": "3e8b8c475d4dfb5515932e2b3f07fd1daecaffbb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5838a414_0374cabf",
        "filename": "private/traced_probes.te",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2018-11-16T15:19:52Z",
      "side": 1,
      "message": "Ahh, I see. My education continues :-)\nBut nonetheless I don\u0027t think it helps as a comment here; the new one explaining the why is better. (This would be more useful in a CL description.)\nAlso I hadn\u0027t actually noticed this was also extracted from the same audit message as the next line.",
      "parentUuid": "73b39cdb_49f9f49b",
      "range": {
        "startLine": 59,
        "startChar": 49,
        "endLine": 60,
        "endChar": 0
      },
      "revId": "3e8b8c475d4dfb5515932e2b3f07fd1daecaffbb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}