{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5e914e0d_109b2249",
        "filename": "microdroid/system/private/compos_key_helper.te",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-10-26T12:59:54Z",
      "side": 1,
      "message": "I think this is almost certainly the wrong domain; this one doesn\u0027t do much communication with anything (deliberately).\n\nI think you want compos. But compos has the microdroid_payload attribute, so actually all you need to do is grant the permissions to microdroid_payload and you get compos for free.\n\n(Actually changing compos to make use of it is more of a challenge.)",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 76
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dc6929e_fcfd74a8",
        "filename": "microdroid/system/private/compos_key_helper.te",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-02T12:44:55Z",
      "side": 1,
      "message": "Without these lines, we get the following error when running ComposHostTestCases\n```\n[    2.459648][   T21] audit: type\u003d1400 audit(1667390888.508:4): avc:  denied  { getattr } for  pid\u003d201 comm\u003d\"compos_key_help\" path\u003d\"/dev/socket/vm_payload_service\" dev\u003d\"tmpfs\" ino\u003d509 scontext\u003du:r:compos_key_helper:s0 tcontext\u003du:object_r:socket_device:s0 tclass\u003dsock_file permissive\u003d0\n[    2.460559][   T21] audit: type\u003d1400 audit(1667390888.508:5): avc:  denied  { read } for  pid\u003d201 comm\u003d\"compos_key_help\" name\u003d\"vm_payload_service\" dev\u003d\"tmpfs\" ino\u003d509 scontext\u003du:r:compos_key_helper:s0 tcontext\u003du:object_r:socket_device:s0 tclass\u003dsock_file permissive\u003d0\n[    2.463732][   T21] audit: type\u003d1400 audit(1667390888.512:6): avc:  denied  { execute } for  pid\u003d209 comm\u003d\"compos_key_help\" name\u003d\"crash_dump64\" dev\u003d\"loop25\" ino\u003d14 scontext\u003du:r:compos_key_helper:s0 tcontext\u003du:object_r:crash_dump_exec:s0 tclass\u003dfile permissive\u003d0\n[    2.465812][    T1] init: Untracked pid 209 exited with status 1\n```",
      "parentUuid": "5e914e0d_109b2249",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 76
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bbe96e3_4a92bc1d",
        "filename": "microdroid/system/private/compos_key_helper.te",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-11-02T15:12:36Z",
      "side": 1,
      "message": "Ah, you are right. I\u0027d forgotten that it now talks back to M_M to get the DICE secrets.",
      "parentUuid": "5dc6929e_fcfd74a8",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 76
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fd8b009_763d6087",
        "filename": "microdroid/system/private/domain.te",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-10-26T12:59:54Z",
      "side": 1,
      "message": "You don\u0027t need this - create_stream_socket_perms includes getopt already.",
      "range": {
        "startLine": 30,
        "startChar": 76,
        "endLine": 30,
        "endChar": 82
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e699ef5_e2fc3961",
        "filename": "microdroid/system/private/domain.te",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-02T12:44:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4fd8b009_763d6087",
      "range": {
        "startLine": 30,
        "startChar": 76,
        "endLine": 30,
        "endChar": 82
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "676ae8b5_1b6e6d32",
        "filename": "microdroid/system/private/file_contexts",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-10-26T12:59:54Z",
      "side": 1,
      "message": "If this is being hosted by microdroid_manager, then conventionally we would give it the label microdroid_manager_socket. That then makes the unix_socket_connect call look more normal. But that\u0027s not necessarily better than what you have here, which is at least descriptive.",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 70
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2728f7c_da0e2878",
        "filename": "microdroid/system/private/file_contexts",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-02T12:44:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "676ae8b5_1b6e6d32",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 70
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f762369c_275c534c",
        "filename": "microdroid/system/private/microdroid_manager.te",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-10-26T11:52:49Z",
      "side": 1,
      "message": "Hi Alan,\n\nI think I probably need to use `vm_payload_service` here instead of `socket_device`, right?\n\nActually the error I got is\n```\navc:  denied  { add_name } for  pid\u003d102 comm\u003d\"microdroid_mana\" name\u003d\"vm_payload_service\" scontext\u003du:r:microdroid_manager:s0 tcontext\u003du:object_r:socket_device:s0 tclass\u003ddir permissive\u003d0\n```\nBut if I add the line `allow microdroid_manager vm_payload_service:dir add_name` here instead. I keep getting the same error.\n\nDo I miss something for vm_payload_service?",
      "range": {
        "startLine": 115,
        "startChar": 51,
        "endLine": 115,
        "endChar": 59
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcdd704c_f3239eb4",
        "filename": "microdroid/system/private/microdroid_manager.te",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-10-26T12:59:54Z",
      "side": 1,
      "message": "Do you need microdroid manager to create the socket file, or can that be done by init? (Init already has all the permissions to do that.)\n\npackages/modules/Virtualization/microdroid_manager/microdroid_manager.rc defines the microdroid_manager service, and in that you can specify that you want a socket created - e.g. cs/android-internal/system/core/debuggerd/tombstoned/tombstoned.rc, cs/android-internal/system/core/init/README.md.\n\nThis rule is roughly correct though - /dev is socket_device:dir, but /dev/vm_payload_service is vm_payload_service_socket:sock_file.",
      "parentUuid": "f762369c_275c534c",
      "range": {
        "startLine": 115,
        "startChar": 51,
        "endLine": 115,
        "endChar": 59
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a80b5b8_c80f1d7c",
        "filename": "microdroid/system/private/microdroid_manager.te",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-02T12:44:55Z",
      "side": 1,
      "message": "Currently I think we need microdroid manager to create the socket, the derived dice is not easily accessible from init.\n\n\u003e This rule is roughly correct though - /dev is socket_device:dir, but /dev/vm_payload_service is vm_payload_service_socket:sock_file.\n\nI see, as we do need to add_name to /dev, we should just keep this rule like this.",
      "parentUuid": "dcdd704c_f3239eb4",
      "range": {
        "startLine": 115,
        "startChar": 51,
        "endLine": 115,
        "endChar": 59
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "131ad7fd_53c9f72a",
        "filename": "microdroid/system/private/microdroid_manager.te",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-11-02T15:12:36Z",
      "side": 1,
      "message": "\u003e Currently I think we need microdroid manager to create the socket, \n\nIf you get init to create the socket as part of starting the microdroid_manager socket it should all work. The DICE stuff still lives in MM.\nIt\u0027s just that init creates the sock_file for you and then creates and binds a socket to it and then makes the fd available for you to listen on via a call to android_get_control_socket. (See the tombstoned example, and cs/android/system/core/init/util.cpp?l\u003d92.) There\u0027s some Rust wrapper code for that here: system/security/prng_seeder/src/cutils_socket.rs.\nOf course that means that the RpcServer.cpp would need to look different - you get given a pre-bound socket rather than a pathname.",
      "parentUuid": "8a80b5b8_c80f1d7c",
      "range": {
        "startLine": 115,
        "startChar": 51,
        "endLine": 115,
        "endChar": 59
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6998f37a_5ffd65a5",
        "filename": "microdroid/system/private/microdroid_manager.te",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-03T12:47:39Z",
      "side": 1,
      "message": "I see. I thought you wanted to create a separate binary to register vm_payload_service like we do today for authfs_service[1]. Thanks for the clarification!\n\n[1] https://cs.android.com/android/platform/superproject/+/master:packages/modules/Virtualization/authfs/service/authfs_service.rc",
      "parentUuid": "131ad7fd_53c9f72a",
      "range": {
        "startLine": 115,
        "startChar": 51,
        "endLine": 115,
        "endChar": 59
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2414f6e_7ed0323f",
        "filename": "microdroid/system/private/microdroid_payload.te",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-10-26T12:59:54Z",
      "side": 1,
      "message": "vm_payload_service_socket",
      "range": {
        "startLine": 55,
        "startChar": 25,
        "endLine": 55,
        "endChar": 38
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ec5d156_80f5966a",
        "filename": "microdroid/system/private/microdroid_payload.te",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-02T12:44:55Z",
      "side": 1,
      "message": "Most MicrodroidTests do not pass when changing this to vm_payload_service_socket, I got the selinux errors (detailed in the comment below)",
      "parentUuid": "c2414f6e_7ed0323f",
      "range": {
        "startLine": 55,
        "startChar": 25,
        "endLine": 55,
        "endChar": 38
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e598740_ec6a4695",
        "filename": "microdroid/system/private/microdroid_payload.te",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-03T12:47:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ec5d156_80f5966a",
      "range": {
        "startLine": 55,
        "startChar": 25,
        "endLine": 55,
        "endChar": 38
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12b906df_b1237fdd",
        "filename": "microdroid/system/private/microdroid_payload.te",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-10-26T12:59:54Z",
      "side": 1,
      "message": "Normally we express this using the unix_socket_connect macro in te_macros:\n\nunix_socket_connect(microdroid_payload, vm_payload_service, microdroid_manager)\n\n(That doesn\u0027t include the getattr though - not sure why you need that?)",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 57,
        "endChar": 0
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d88b58b_b87fe4ec",
        "filename": "microdroid/system/private/microdroid_payload.te",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-02T12:44:55Z",
      "side": 1,
      "message": "It doesn\u0027t work when changing to \n```\nallow microdroid_payload socket_device:sock_file { getattr };\nunix_socket_connect(microdroid_payload, vm_payload_service, microdroid_manager)\n```\nThat causes errors like\n```\n11-02 12:43:38.746  3652  3833 I MicrodroidTests: Console: [    1.112650][   T21] audit: type\u003d1400 audit(1667389418.352:4): avc:  denied  { write } for  pid\u003d120 comm\u003d\"microdroid_laun\" name\u003d\"vm_payload_service\" dev\u003d\"tmpfs\" ino\u003d329 scontext\u003du:r:microdroid_app:s0 tcontext\u003du:object_r:socket_device:s0 tclass\u003dsock_file permissive\u003d0\n11-02 12:43:38.748  3652  3852 I MicrodroidTests: Payload: libc: Access denied finding property \"persist.sys.timezone\"\n11-02 12:43:38.749  3652  3834 I MicrodroidTests: Log: RpcSession E 11-02 11:43:38   120   120] Could not connect socket at path \u0027/dev/socket/vm_payload_service\u0027: Permission denied\n11-02 12:43:38.749  3652  3834 I MicrodroidTests: Log: microdroid_launcher E 11-02 11:43:38   120   120 libbinder_rpc_unstable.cpp:107] Failed to set up Unix Domain RPC client with path: /dev/socket/vm_payload_service error: -13 (Permission denied)\n11-02 12:43:38.749  3652  3834 I MicrodroidTests: Log: vm_payload E 11-02 11:43:38   120   120] vm_payload::vm_payload_service: Failed to connect to service: /dev/socket/vm_payload_service\n11-02 12:43:38.749  3652  3834 I MicrodroidTests: Log:\n```\n----\nI also tried to drop `getattr`, then I got the error\n```\navc:  denied  { getattr } for  pid\u003d120 comm\u003d\"microdroid_laun\" path\u003d\"/dev/socket/vm_payload_service\" dev\u003d\"tmpfs\" ino\u003d329 scontext\u003du:r:microdroid_app:s0 tcontext\u003du:object_r:socket_device:s0 tclass\u003dsock_file permissive\u003d0\n```",
      "parentUuid": "12b906df_b1237fdd",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 57,
        "endChar": 0
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcc024d5_0006c28f",
        "filename": "microdroid/system/private/microdroid_payload.te",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-11-02T15:12:36Z",
      "side": 1,
      "message": "\u003e avc:  denied  { write } for  pid\u003d120 comm\u003d\"microdroid_laun\" name\u003d\"vm_payload_service\" dev\u003d\"tmpfs\" ino\u003d329 scontext\u003du:r:microdroid_app:s0 tcontext\u003du:object_r:socket_device:s0 tclass\u003dsock_file permissive\u003d0\n\nSo the reason that is failing is because the label of /dev/socket/vm_payload_service is still socket_device instead of being vm_payload_service_socket.\n\nAnd that\u0027s another reason why we should get init to create the socket file \u0026 socket; it sets the label to the right thing.\n\nI\u0027m still puzzled by the getattr. I can understand the denial, but does it actually stop anything working? If it is needed, it\u0027s fine, should be harmless.",
      "parentUuid": "2d88b58b_b87fe4ec",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 57,
        "endChar": 0
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fecc2930_f56a3b99",
        "filename": "microdroid/system/private/microdroid_payload.te",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-03T12:47:39Z",
      "side": 1,
      "message": "Yeah, creating the socket in init fixes the problem.\n\nI think getattr is needed in throwing error. We don\u0027t need it when things work.",
      "parentUuid": "fcc024d5_0006c28f",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 57,
        "endChar": 0
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "748b6304_849084d1",
        "filename": "microdroid/system/public/vm_payload_service.te",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-10-26T12:59:54Z",
      "side": 1,
      "message": "I don\u0027t think you need this; there isn\u0027t a vm_payload_service process, the socket is owned by microdroid_manager.",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 32
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40d051c1_db2a683c",
        "filename": "microdroid/system/public/vm_payload_service.te",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2022-11-02T12:44:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "748b6304_849084d1",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 32
      },
      "revId": "4419b8ea940e98b1d75dcc187171eb0f6e96b09c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}