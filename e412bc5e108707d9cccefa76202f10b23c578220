{
  "comments": [
    {
      "key": {
        "uuid": "2ca648e5_bf0de726",
        "filename": "private/bpfloader.te",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2020-06-03T07:34:02Z",
      "side": 1,
      "message": "I think it\u0027s time to get rid of these two neverallow rules. They were originally intended to help us limit the expansion of bpf usage until we had a bit more confidence in it. Clearly it\u0027s not going away, and will only continue to expand. Furthermore, we have higher confidence in it than in the vendor/oem kernel customizations that it\u0027s replacing, so limiting partner use is likely a net negative for security.\n\nLet\u0027s leave the neverallow in line #29, delete these two rules, and add the following to private/app.te.\n\nneverallow appdomain *:bpf prog_run *;",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 95
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2052380c_2d5ea3b9",
        "filename": "private/bpfloader.te",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2020-06-03T07:50:34Z",
      "side": 1,
      "message": "We are absolutely not setup atm to allow partner use of bpf.\nUntil such time as that changes, I would prefer this to be locked down tight.",
      "parentUuid": "2ca648e5_bf0de726",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 95
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "527be8d0_556fc907",
        "filename": "private/bpfloader.te",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2020-06-03T08:13:49Z",
      "side": 1,
      "message": "I\u0027m under the impression that vendors are already requesting this.",
      "parentUuid": "2052380c_2d5ea3b9",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 95
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cccce00d_08c1ed9e",
        "filename": "private/bpfloader.te",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2020-06-03T09:12:58Z",
      "side": 1,
      "message": "They\u0027re asking yes, but we didn\u0027t make R.",
      "parentUuid": "527be8d0_556fc907",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 95
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "949ea60a_a604be86",
        "filename": "private/bpfloader.te",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1339259
      },
      "writtenOn": "2020-06-03T18:24:59Z",
      "side": 1,
      "message": "Given the policy around vendors is not yet ready in R, and potentially I need to cherry-pick this change to prebuilt/api/30.0 for supporting vendors volunteer to ship a kernel with the gpu_mem tracepoint integrated. I\u0027d leave these lines as they are in this change.",
      "parentUuid": "cccce00d_08c1ed9e",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 95
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56f80b81_24673e40",
        "filename": "private/domain.te",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2020-06-03T07:34:02Z",
      "side": 1,
      "message": "I don\u0027t think this is the right approach. Instead, we should be labeling these files as \"debugfs_tracing\" in genfs_contexts.",
      "range": {
        "startLine": 141,
        "startChar": 3,
        "endLine": 141,
        "endChar": 13
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f0cf21f_a16cf3f9",
        "filename": "private/domain.te",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1339259
      },
      "writtenOn": "2020-06-03T18:24:59Z",
      "side": 1,
      "message": "You answered the exact question I asked in the patchsetv1. Thx!",
      "parentUuid": "56f80b81_24673e40",
      "range": {
        "startLine": 141,
        "startChar": 3,
        "endLine": 141,
        "endChar": 13
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99f30ea7_ce6352f0",
        "filename": "private/gpuservice.te",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2020-06-03T07:34:02Z",
      "side": 1,
      "message": "label these files as debugfs_tracing.",
      "range": {
        "startLine": 46,
        "startChar": 17,
        "endLine": 46,
        "endChar": 43
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ed0b2cf_b19e7fa9",
        "filename": "private/gpuservice.te",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1339259
      },
      "writtenOn": "2020-06-03T18:24:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99f30ea7_ce6352f0",
      "range": {
        "startLine": 46,
        "startChar": 17,
        "endLine": 46,
        "endChar": 43
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c47d2c23_801fb75e",
        "filename": "private/gpuservice.te",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2020-06-03T07:34:02Z",
      "side": 1,
      "message": "I don\u0027t understand what this has to do with the rest of the change.",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 59
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efa31c23_10765ede",
        "filename": "private/gpuservice.te",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1339259
      },
      "writtenOn": "2020-06-03T18:24:59Z",
      "side": 1,
      "message": "me either...the audit2allow asks me to add this and I noticed similar in system_server:\n\n# Allow system server to attach BPF programs to tracepoints. Deny read permission so that\n# system_server cannot use this access to read perf event data like process stacks.\nallow system_server self:perf_event { open write cpu kernel };\nneverallow system_server self:perf_event ~{ open write cpu kernel };\n\nAnd i still need it, otherwise the attaching bpf prog to TP did fail.",
      "parentUuid": "c47d2c23_801fb75e",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 59
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ee381ab_e8119c89",
        "filename": "private/gpuservice.te",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2020-06-03T08:13:49Z",
      "side": 1,
      "message": "We need a better mechanism for doing access control of bpf maps. This approach means that gpuservice has access to any map that has been created by bpfloader. That\u0027s not great. Can we have bpfloader create a separate label for this map (e.g. using fsetfilecon()) such that we can both limit access to these maps to just gpuservice and prevent gpuservice from accessing the bpf maps of other processes. Alternatively, we could do the access control at the filesystem layer by providing a separate label for these files in fs_bpf.",
      "range": {
        "startLine": 54,
        "startChar": 17,
        "endLine": 54,
        "endChar": 30
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "543e1dd2_6efd95c8",
        "filename": "private/gpuservice.te",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2020-06-03T09:12:58Z",
      "side": 1,
      "message": "My understanding is we need not yet ready kernel patches to enable bpf filesystem to support selinux labels (or at the bare minimum changes to how bpffs is mounted). connoro@ \u0026 adelva@ would know I think.  I don\u0027t remember specifics.\n\nplus changes to bpf loader to enforce some sort of sanity to prevent namespace collisions, and changes to make it support loading from vendor partition.\n\nadditionally I\u0027m still fighting (without success) random bpfloader failures during boot.\n\nat the moment the only support we have is based on these generic selinux rules and unix privs on the progs/maps (ie. uid/gid \u0026 owner/group/other perms)\n\nimho this is *not* ready for vendor consumption in R.\n\nwe do want this to get better, both to enable vendors and in order to allow our own development (we\u0027d like to ship and access bpf progs/maps from networking mainline modules)",
      "parentUuid": "8ee381ab_e8119c89",
      "range": {
        "startLine": 54,
        "startChar": 17,
        "endLine": 54,
        "endChar": 30
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f120049d_2bf0f589",
        "filename": "private/gpuservice.te",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1339259
      },
      "writtenOn": "2020-06-03T18:24:59Z",
      "side": 1,
      "message": "Currently gpuservice has gid AID_GRAPHICS so it can\u0027t read the other existing bpf maps which are all in different groups. Looks like the uid is always AID_ROOT, otherwise gpuservice itself do have a separate uid defined so that to distinguish the map created from the potential future other maps in the AID_GRAPHICS group.",
      "parentUuid": "543e1dd2_6efd95c8",
      "range": {
        "startLine": 54,
        "startChar": 17,
        "endLine": 54,
        "endChar": 30
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}