{
  "comments": [
    {
      "key": {
        "uuid": "2ca648e5_bf0de726",
        "filename": "private/bpfloader.te",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2020-06-03T07:34:02Z",
      "side": 1,
      "message": "I think it\u0027s time to get rid of these two neverallow rules. They were originally intended to help us limit the expansion of bpf usage until we had a bit more confidence in it. Clearly it\u0027s not going away, and will only continue to expand. Furthermore, we have higher confidence in it than in the vendor/oem kernel customizations that it\u0027s replacing, so limiting partner use is likely a net negative for security.\n\nLet\u0027s leave the neverallow in line #29, delete these two rules, and add the following to private/app.te.\n\nneverallow appdomain *:bpf prog_run *;",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 95
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2052380c_2d5ea3b9",
        "filename": "private/bpfloader.te",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2020-06-03T07:50:34Z",
      "side": 1,
      "message": "We are absolutely not setup atm to allow partner use of bpf.\nUntil such time as that changes, I would prefer this to be locked down tight.",
      "parentUuid": "2ca648e5_bf0de726",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 95
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "527be8d0_556fc907",
        "filename": "private/bpfloader.te",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2020-06-03T08:13:49Z",
      "side": 1,
      "message": "I\u0027m under the impression that vendors are already requesting this.",
      "parentUuid": "2052380c_2d5ea3b9",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 95
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56f80b81_24673e40",
        "filename": "private/domain.te",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2020-06-03T07:34:02Z",
      "side": 1,
      "message": "I don\u0027t think this is the right approach. Instead, we should be labeling these files as \"debugfs_tracing\" in genfs_contexts.",
      "range": {
        "startLine": 141,
        "startChar": 3,
        "endLine": 141,
        "endChar": 13
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99f30ea7_ce6352f0",
        "filename": "private/gpuservice.te",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2020-06-03T07:34:02Z",
      "side": 1,
      "message": "label these files as debugfs_tracing.",
      "range": {
        "startLine": 46,
        "startChar": 17,
        "endLine": 46,
        "endChar": 43
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c47d2c23_801fb75e",
        "filename": "private/gpuservice.te",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2020-06-03T07:34:02Z",
      "side": 1,
      "message": "I don\u0027t understand what this has to do with the rest of the change.",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 59
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ee381ab_e8119c89",
        "filename": "private/gpuservice.te",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2020-06-03T08:13:49Z",
      "side": 1,
      "message": "We need a better mechanism for doing access control of bpf maps. This approach means that gpuservice has access to any map that has been created by bpfloader. That\u0027s not great. Can we have bpfloader create a separate label for this map (e.g. using fsetfilecon()) such that we can both limit access to these maps to just gpuservice and prevent gpuservice from accessing the bpf maps of other processes. Alternatively, we could do the access control at the filesystem layer by providing a separate label for these files in fs_bpf.",
      "range": {
        "startLine": 54,
        "startChar": 17,
        "endLine": 54,
        "endChar": 30
      },
      "revId": "e412bc5e108707d9cccefa76202f10b23c578220",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}