# Perfetto tracing probes (debugfs access)
typeattribute traced_probes coredomain;

# Allow init to exec and transition to  the daemon domain.
domain_trans(init, traced_exec, traced_probes)

# Define and allow access to a unique type for
# this domain when creating tmpfs / shmem / ashmem files.
type_transition traced_probes tmpfs:file traced_tmpfs;
allow traced_probes traced_tmpfs:file { read write getattr map };
allow traced_probes tmpfs:dir { getattr search };

 # Allow traced_probes to access tracefs.
allow traced_probes debugfs_tracing:dir r_dir_perms;
allow traced_probes debugfs_tracing:file rw_file_perms;
allow traced_probes debugfs_tracing_debug:file rw_file_perms;
allow traced_probes debugfs_trace_marker:file getattr;

# Allow to connect to traced's Producer port and write tracing data.
write_traced(traced_probes)

# Allow traced_probes to start with a higher scheduling class and then downgrade
# itself.
allow traced_probes self:global_capability_class_set { sys_nice };

# Allow procfs access
r_dir_file(traced_probes, domain)

###
### Neverallow rules
###
### traced_probes should NEVER do any of this

# Block device access.
neverallow traced_probes dev_type:blk_file { read write };

# ptrace any other app
neverallow traced_probes domain:process ptrace;

# ... and nobody may ptrace me (except on userdebug or eng builds)
neverallow { domain userdebug_or_eng(`-crash_dump') } traced_probes:process ptrace;

# Write to /system.
neverallow traced_probes system_file:dir_file_class_set write;

# Write to files in /data/data or system files on /data
neverallow traced_probes { app_data_file system_data_file }:dir_file_class_set write;

# Only init is allowed to enter the traced_probes domain via exec()
neverallow { domain -init } traced_probes:process transition;
neverallow * traced_probes:process dyntransition;
