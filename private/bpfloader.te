# bpf program loader
type bpfloader, domain;
type bpfloader_exec, system_file_type, exec_type, file_type;
typeattribute bpfloader coredomain;

# These permissions are required to pin ebpf maps & program for netd.
allow bpfloader fs_bpf:dir { search write add_name };
allow bpfloader fs_bpf:file { create setattr };

# Allow bpfloader to create bpf maps and programs. The map_read and map_write permission is needed
# for retrieving a pinned map when bpfloader do a run time restart.
allow bpfloader self:bpf { map_create map_read map_write prog_load prog_run };

allow bpfloader self:capability { chown sys_admin };

###
### Neverallow rules
###
neverallow { domain -bpfloader } *:bpf { map_create prog_load };
neverallow { domain -bpfloader -netd -netutils_wrapper -system_server } *:bpf prog_run;
neverallow { domain -bpfloader -init } bpfloader_exec:file { execute execute_no_trans };
neverallow bpfloader domain:{ tcp_socket udp_socket rawip_socket } *;
# only system_server, netd and bpfloader can read/write the bpf maps
neverallow { domain -system_server -netd -bpfloader} *:bpf { map_read map_write };

# No domain should be allowed to ptrace bpfloader
neverallow { domain userdebug_or_eng(`-llkd') } bpfloader:process ptrace;

set_prop(bpfloader, bpf_progs_loaded_prop)

# Triggered by tests
dontaudit platform_app fs_bpf:dir search;

neverallow { domain -bpfloader -netd -netutils_wrapper -system_server -init -vendor_init } fs_bpf:dir search;
neverallow { domain -bpfloader } fs_bpf:dir { write add_name };
neverallow { domain -bpfloader } fs_bpf:file create;
# eliminate netd, init, vendor_init
neverallow { domain -bpfloader -netd -init -vendor_init } fs_bpf:file setattr;

# netutils_wrapper fs_bpf:file { read write };
# netd fs_bpf:file { read write };
# init fs_bpf:file { read setattr open };
# vendor_init fs_bpf:file { read setattr map open };
# system_server fs_bpf:file { read write };
neverallow { domain -bpfloader -init -vendor_init -system_server -netd -netutils_wrapper } fs_bpf:file *;
