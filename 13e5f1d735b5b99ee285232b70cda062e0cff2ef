{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9abb5d9a_7d8bccf3",
        "filename": "private/app.te",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2023-03-14T10:18:31Z",
      "side": 1,
      "message": "This seems like a bad idea. apex-info-list.xml is not a stable API, and access is deliberately restricted to a small number of system processes.",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 477,
        "endChar": 24
      },
      "revId": "13e5f1d735b5b99ee285232b70cda062e0cff2ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c5c6e62_9bbfe879",
        "filename": "private/app.te",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1432579
      },
      "writtenOn": "2023-03-14T11:11:42Z",
      "side": 1,
      "message": "+1 to what Alan said, however we a bit different reasoning :)\n\nUnfortunately, the apex-info-list.xml is used by a Mainline module, so we need to keep the interface stable. Having said that, I think that we shouldn\u0027t add more clients that rely on that xml being stable. And especially we shouldn\u0027t expose this xml file to the apps. All apex-related information that might be useful for apps should be exposed via PackageManager APs.",
      "parentUuid": "9abb5d9a_7d8bccf3",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 477,
        "endChar": 24
      },
      "revId": "13e5f1d735b5b99ee285232b70cda062e0cff2ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e130046_555a0ad2",
        "filename": "private/app.te",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1432579
      },
      "writtenOn": "2023-03-14T12:07:25Z",
      "side": 1,
      "message": "If you need to have access to apex-info-list.xml, then you can write a host-side test, since adb has access to the file.",
      "parentUuid": "2c5c6e62_9bbfe879",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 477,
        "endChar": 24
      },
      "revId": "13e5f1d735b5b99ee285232b70cda062e0cff2ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4aa90c33_98bb1924",
        "filename": "private/app.te",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-03-14T21:52:35Z",
      "side": 1,
      "message": "The issue is that the app calls `VintfObject` APIs\n\nhttps://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/os/VintfObject.java?q\u003dVintfObject.java\u0026ss\u003dandroid%2Fplatform%2Fsuperproject\u0026ct\u003dos\u0026sq\u003dUSE_DEFAULT_STORED_QUERY\n\nwhich internally requires the `apex-info-list.xml` file when it retrieves the manifests. The manifest is needed to read the compatibility matrix, and the compatibility matrix is needed to read the platform sepolicy version strings.\n\nIf we can\u0027t let CTS apps to read this file then we have to break the dependency somewhere else.\n\n@rseymour@google.com Perhaps we need a special flag when compatibility matrix needs to read the HAL manifest, so the APEX HALs fragments are excluded? After all, only the HAL manifest level is needed by the framework compatibility matrix.",
      "parentUuid": "8e130046_555a0ad2",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 477,
        "endChar": 24
      },
      "revId": "13e5f1d735b5b99ee285232b70cda062e0cff2ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fc32fdd_72a14fc2",
        "filename": "private/app.te",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-03-14T21:59:38Z",
      "side": 1,
      "message": "Even though `CtsSecurityHostTestCases` is already a host test, it is relying on the device info collector to get the platform sepolicy version. The device info collector is an app.\n\nWe could have `CtsSecurityHostTestCases` to read the platform sepolicy version from `/system/etc/vintf` directly, but it won\u0027t fix the problem of device info collector failing to get the device manifest to report `VintfDeviceInfo` correctly.\n\nI think as a short-term solution, we can either do this change, or let FCM not read APEX HAL manifests as I suggested above. In the long term, we can have `VintfDeviceInfoCollector` to run on host instead.",
      "parentUuid": "4aa90c33_98bb1924",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 477,
        "endChar": 24
      },
      "revId": "13e5f1d735b5b99ee285232b70cda062e0cff2ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9ceae94_1185ae26",
        "filename": "private/app.te",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2023-03-15T10:39:54Z",
      "side": 1,
      "message": "\u003e The issue is that the app calls VintfObject APIs ... which internally requires the apex-info-list.xml file when it retrieves the manifests.\n\nThat\u0027s ok - but the read of the file should be done in the context of system server, with an appropriate permission check, not in the context of the calling app.\n\n\u003e I think as a short-term solution, we can either do this change, \n\nIf we do this change (allow all apps to access the file) we will never be able to undo it. So we should not.",
      "parentUuid": "4fc32fdd_72a14fc2",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 477,
        "endChar": 24
      },
      "revId": "13e5f1d735b5b99ee285232b70cda062e0cff2ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c68024e_ccd2267c",
        "filename": "private/app.te",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2023-03-15T23:29:01Z",
      "side": 1,
      "message": "My short-term suggestion is that, here:\n\nhttps://cs.android.com/android/platform/superproject/+/master:system/libvintf/VintfObject.cpp;l\u003d91;drc\u003d7884e551eb6f054c86bf7dbf138a2351104e2414\n\nFor `getDeviceManifest`, create a separate `getDeviceManifestInternal(bool fetchApexManifests)` function that conditionally fetch the APEX manifests. Then:\n\n* getDeviceManifest should call `getDeviceManifestInternal(true)`\n* fetchFrameworkCompatibilityMatrix should call `getDeviceManifestInternal(false)`. This will skip the check on `isApexReady()` etc. all together. https://cs.android.com/android/platform/superproject/+/master:system/libvintf/VintfObject.cpp;l\u003d132;drc\u003d7884e551eb6f054c86bf7dbf138a2351104e2414",
      "parentUuid": "d9ceae94_1185ae26",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 477,
        "endChar": 24
      },
      "revId": "13e5f1d735b5b99ee285232b70cda062e0cff2ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "800b5a07_2f8b7074",
        "filename": "private/app.te",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1830881
      },
      "writtenOn": "2023-03-15T23:42:05Z",
      "side": 1,
      "message": "Thanks for the suggestion, I\u0027ll have a look.",
      "parentUuid": "0c68024e_ccd2267c",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 477,
        "endChar": 24
      },
      "revId": "13e5f1d735b5b99ee285232b70cda062e0cff2ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}