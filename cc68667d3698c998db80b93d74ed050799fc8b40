{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "95517457_05d90b02",
        "filename": "private/derive_sdk.te",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2022-09-28T06:54:28Z",
      "side": 1,
      "message": "(Continuation of discussion in PS2. Ping @alanstokes@google.com.)\n\nWhen running `adb shell dumpstate -v`, dumpstate\u0027s stdout is still connected to the interactive terminal, and this rule isn\u0027t needed. But when bugreportz (`adb bugreport`) is running, the dumpstatez service is started (`setprop ctl.start dumpstatez`), and dumpstate will redirect it\u0027s stdout to a shell_data_file (eg  /data/user_de/0/com.android.sh\nell/files/bugreports/bugreport-aosp_oriole-AOSP.MASTER-2022-09-27-15-18-54-dumpstate_log-3491.txt). When calling child processes, by default dumpstate will dup the child stdout to its own stdout, which is now the shell_data_file.\n\nI would have thought that selinux only cared about the child having write access to a file descriptor, but it seems that the fact dumpstate\u0027s stdout is redirected to a file is significant?\n\nI tried changing dumpstate to open a pipe (via `pipe2`) and pass in the write end to derive_sdk, but that required other SELinux rules and I abandoned it.\n\nI also tried adding a new binary to the SdkExtensions apex and calling that instead. Because of apex/com.android.sdkext-file_contexts:\n\n```\n(/.*)?                       u:object_r:system_file:s0\n/bin/derive_classpath        u:object_r:derive_classpath_exec:s0\n/bin/derive_sdk              u:object_r:derive_sdk_exec:s0\n```\n \nthe new binary became a system_file, and no selinux rules were required for bugreport/dumpstate/the new binary to work.\n\nI thought derive_sdk_exec would inherit all system_file rules\n\n```\ntype derive_sdk_exec, system_file_type, exec_type, file_type;\n```\n \nbut perhaps there\u0027s another rule I haven\u0027t found that removes or adds something.\n\nFinally, cf private/incident.te\n\n```\n# allow incident to communicate with dumpstate, and write incident report to\n# /data/data/com.android.shell/files/bugreports/tmp_incident_report\nallow incident dumpstate:fd use;\nallow incident dumpstate:unix_stream_socket { read write };\nallow incident shell_data_file:file write;\n```",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 68
      },
      "revId": "cc68667d3698c998db80b93d74ed050799fc8b40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cdc7297_8e31601c",
        "filename": "private/derive_sdk.te",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-09-28T09:40:28Z",
      "side": 1,
      "message": "\u003e I would have thought that selinux only cared about the child having write access to a file descriptor, but it seems that the fact dumpstate\u0027s stdout is redirected to a file is significant?\n\nThat\u0027s correct. This is part of mandatory access control; the process can\u0027t write to that file unless it has been permitted to. (Allowing read/write without open/create is a common selinux idiom; it allows the process access to files of that type, but only those to which it is given an fd by some more privileged process.)\n\n\u003e I thought derive_sdk_exec would inherit all system_file rules\n\nIt does (well, system_file_type rules, to be precise). But the executable and the process created by running it are different things with different labels.\n\nWhen executing it, you can either stay in the same domain, or switch to another one. Switching to another domain, which is what the CL currently does, seems like a good idea when you want to grant extra permissions only for that sub-process; otherwise the parent needs to have the union of all permissions required by it \u0026 its children.\n\n\nSo, to summarize: I\u0027d be happy with the CL in its current form, if you add a comment explaining why the shell_data_file access is there.",
      "parentUuid": "95517457_05d90b02",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 68
      },
      "revId": "cc68667d3698c998db80b93d74ed050799fc8b40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd85d185_a9271f6c",
        "filename": "private/derive_sdk.te",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2022-09-28T11:29:42Z",
      "side": 1,
      "message": "\u003ef you add a comment explaining why the shell_data_file access is there.\n\nI\u0027ve added\n\n```\n# Allow derive_sdk to write data back to dumpstate when forked from dumpstate.\n# The shell_data_file permissions are needed when a bugreport is taken:\n# dumpstate will redirect its stdout to a temporary shell_data_file:file, and\n# this makes derive_sdk append to that file.\n```",
      "parentUuid": "8cdc7297_8e31601c",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 68
      },
      "revId": "cc68667d3698c998db80b93d74ed050799fc8b40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64f1b929_8bafb9fb",
        "filename": "private/derive_sdk.te",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-09-28T12:20:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "bd85d185_a9271f6c",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 68
      },
      "revId": "cc68667d3698c998db80b93d74ed050799fc8b40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bb1fb84_e018e14f",
        "filename": "private/dumpstate.te",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1060831
      },
      "writtenOn": "2022-09-28T12:20:39Z",
      "side": 1,
      "message": "nit: ... execute derive_sdk in its own domain",
      "range": {
        "startLine": 127,
        "startChar": 21,
        "endLine": 127,
        "endChar": 36
      },
      "revId": "cc68667d3698c998db80b93d74ed050799fc8b40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}