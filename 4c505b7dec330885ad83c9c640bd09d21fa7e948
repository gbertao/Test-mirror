{
  "comments": [
    {
      "key": {
        "uuid": "1bca1158_87b535a1",
        "filename": "public/attributes",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2019-08-06T23:24:39Z",
      "side": 1,
      "message": "I\u0027m starting to question whether we really need such a high granularity of access control for exported props. IIUC exported props are of interest because they cross Treble boundary, so do we care if an exported prop is set from vendor_init or, say, rild? As long as we can guarantee that all exported props have stable API, we\u0027re OK, right?",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 95,
        "endChar": 49
      },
      "revId": "4c505b7dec330885ad83c9c640bd09d21fa7e948",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2823523_6a5a3a85",
        "filename": "public/attributes",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-08-06T23:36:29Z",
      "side": 1,
      "message": "Correct. We don\u0027t need to distinguish vendor_init from other vendor processes. To us, they are all the same. So vendor_init_* could be renamed to just vendor_*.\n\nBut we anyway need to distinguish core(system)/public/vendor and readable/settable/non_settable, right?",
      "parentUuid": "1bca1158_87b535a1",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 95,
        "endChar": 49
      },
      "revId": "4c505b7dec330885ad83c9c640bd09d21fa7e948",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb55eff6_aea334c9",
        "filename": "public/attributes",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2019-08-07T00:10:52Z",
      "side": 1,
      "message": "Not sure, could you give an example? I can\u0027t think of a reason why we want to distinguish between system reading a vendor prop and vendor reading a system prop.",
      "parentUuid": "b2823523_6a5a3a85",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 95,
        "endChar": 49
      },
      "revId": "4c505b7dec330885ad83c9c640bd09d21fa7e948",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deae3a54_6c9214e0",
        "filename": "public/attributes",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-08-07T00:47:07Z",
      "side": 1,
      "message": "system reading a vendor-defined prop (e.g. ro.qcom.foo.bar) is a Treble violation, while vendor reading a system prop (e.g. ro.build.product) is okay as long as the system prop is made public.\n\nWe also want to distinguish read-only and writable sysprops. For example, it is okay for vendor to read ro.secure, but it\u0027s not okay for them to set it (via vendor_init).",
      "parentUuid": "fb55eff6_aea334c9",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 95,
        "endChar": 49
      },
      "revId": "4c505b7dec330885ad83c9c640bd09d21fa7e948",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}