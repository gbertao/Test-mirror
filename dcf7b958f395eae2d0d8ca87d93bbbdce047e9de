{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4114fb91_7cd97cef",
        "filename": "private/charger_type.te",
        "patchSetId": 10
      },
      "lineNbr": 3,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-29T23:50:48Z",
      "side": 1,
      "message": "Jeff, qqs:\n\n- is there a better name for this, since it\u0027s an attribute (not a type)? I am thinking it should be \u0027charger_domain\u0027, but maybe you have an even more specific idea?\n- I think it\u0027s interesting to note here that this attribute is used exactly like some of these single-parameter macros. Since expandattribute is not specified, and it will be compiled out, I actually quite like the use of an attribute over, say, a macro like \u0027use_binder\u0027. One of the coolest things about this is that it allows you to write rules about all of the charger_type. This can be much more explicit/clear than some of the rules we have. We should consider replacing some of the macros we do have with attributes.",
      "range": {
        "startLine": 3,
        "startChar": 16,
        "endLine": 3,
        "endChar": 21
      },
      "revId": "dcf7b958f395eae2d0d8ca87d93bbbdce047e9de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d69f6a1_3e22ccac",
        "filename": "private/charger_type.te",
        "patchSetId": 10
      },
      "lineNbr": 3,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-10-30T05:33:58Z",
      "side": 1,
      "message": "I used to call it \"charger_common_type\" but Alan suggests \"charger_type\". Let me know if you want better names.",
      "parentUuid": "4114fb91_7cd97cef",
      "range": {
        "startLine": 3,
        "startChar": 16,
        "endLine": 3,
        "endChar": 21
      },
      "revId": "dcf7b958f395eae2d0d8ca87d93bbbdce047e9de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba1ee56d_636067ab",
        "filename": "private/charger_type.te",
        "patchSetId": 10
      },
      "lineNbr": 3,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2021-11-01T06:57:51Z",
      "side": 1,
      "message": "The primary reason for avoiding using attributes this way is because it makes writing useful neverallow rules difficult to enforce, and easy to bypass. For example, if you create a neverallow rule but want to exempt an attribute, then you have to add a lot of logic that ensures that only expected types have that attribute. The neverallow rule below is a good example. How are we preventing arbitrary types from being added to the charger_type attribute? A partner could add charger_type to untrusted app (or any other type) and thus be able to bypass the intended purpose of this neverallow rule. For appdomain, we have tests that ensure that zygote-forked processes have the appdomain attribute and non-zygote-forked processes do no. Macros OTOH allow assigning permissions to types while still requiring that types be specifically exempted from neverallow rules that they violate.",
      "parentUuid": "1d69f6a1_3e22ccac",
      "range": {
        "startLine": 3,
        "startChar": 16,
        "endLine": 3,
        "endChar": 21
      },
      "revId": "dcf7b958f395eae2d0d8ca87d93bbbdce047e9de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02cd22c3_513002d9",
        "filename": "public/charger_type.te",
        "patchSetId": 10
      },
      "lineNbr": 12,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-29T23:50:48Z",
      "side": 1,
      "message": "style (compared to line below?)",
      "range": {
        "startLine": 12,
        "startChar": 52,
        "endLine": 12,
        "endChar": 54
      },
      "revId": "dcf7b958f395eae2d0d8ca87d93bbbdce047e9de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "078cc7c2_2cad95f9",
        "filename": "public/charger_type.te",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-10-29T23:50:48Z",
      "side": 1,
      "message": "these should only be needed by charger mode for the most part, right? not the health HAL?",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 35,
        "endChar": 49
      },
      "revId": "dcf7b958f395eae2d0d8ca87d93bbbdce047e9de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04c89a21_7161fa86",
        "filename": "public/charger_type.te",
        "patchSetId": 10
      },
      "lineNbr": 35,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-10-30T05:33:58Z",
      "side": 1,
      "message": "Correct, this is for charger mode.\n\nIn AIDL health HAL, I am combining the functionality of charger into the health HAL. This is why these permissions are added to the health HAL.\n\nWhen the health HAL is started as charger mode, it will continue to have domain `hal_health_default` (or some vendor specific domain), but NOT the charger domain. Note the charger domain is a coredomain because it is a system binary.",
      "parentUuid": "078cc7c2_2cad95f9",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 35,
        "endChar": 49
      },
      "revId": "dcf7b958f395eae2d0d8ca87d93bbbdce047e9de",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}