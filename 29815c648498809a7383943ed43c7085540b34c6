{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f23cdc55_5e9babce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1482458
      },
      "writtenOn": "2023-03-30T10:14:39Z",
      "side": 1,
      "message": "Update the patch set to remove CAP_KILL.\n\n(Also, updated related CLs as well)\nhttps://android-review.googlesource.com/c/platform/hardware/google/camera/+/2515017\nhttps://android-review.googlesource.com/c/platform/frameworks/av/+/2470180",
      "revId": "29815c648498809a7383943ed43c7085540b34c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ff3c784_780a52c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2023-03-30T10:20:56Z",
      "side": 1,
      "message": "In my Pixel 6 it looks like the Camera HAL is running as UID system. Perhaps toss in a don",
      "parentUuid": "f23cdc55_5e9babce",
      "revId": "29815c648498809a7383943ed43c7085540b34c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c79278fc_cda8bdda",
        "filename": "public/domain.te",
        "patchSetId": 6
      },
      "lineNbr": 1001,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2023-03-30T10:20:56Z",
      "side": 1,
      "message": "we should ask the incidentd folks if this is acceptable. +joeo",
      "range": {
        "startLine": 1001,
        "startChar": 58,
        "endLine": 1001,
        "endChar": 70
      },
      "revId": "29815c648498809a7383943ed43c7085540b34c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2d1d469_ccde17d4",
        "filename": "public/domain.te",
        "patchSetId": 6
      },
      "lineNbr": 1001,
      "author": {
        "id": 1000701
      },
      "writtenOn": "2023-03-30T21:22:45Z",
      "side": 1,
      "message": "I\u0027m not really working on incidentd anymore. @yaochen, is anyone?\n\nBut either way, is this making camera able to read tombstones? That does NOT sound okay. In general, services shouldn\u0027t be doing their own logging upload or reporting.  They should trigger a bugreport, which will follow all of the privacy rules surrounding bugreport and tombstone data.\n\nThis is fundamentally a privacy issue, so there needs to be a PDD for this.",
      "parentUuid": "c79278fc_cda8bdda",
      "range": {
        "startLine": 1001,
        "startChar": 58,
        "endLine": 1001,
        "endChar": 70
      },
      "revId": "29815c648498809a7383943ed43c7085540b34c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "055b55c3_7eeebb16",
        "filename": "public/domain.te",
        "patchSetId": 6
      },
      "lineNbr": 1001,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2023-03-30T21:35:24Z",
      "side": 1,
      "message": "Grabbing a bugreport for every camera service watchdog firing would presumably not be acceptable on released user- builds, though it would make a lot of sense for dogfooding.\n\nIs this something where userdebug- and user- builds are allowed to diverge?\n\nWe\u0027re basically trying to figure out how to get debug information that is lost if the stack traces aren\u0027t captured before this watchdog fires and kills the service to recover operation.  Before the watchdog, everything would just be deadlocked so a bug report would have the necessary information; with the watchdog (which improves the user experience greatly) we can\u0027t get that and it makes it much harder to fix the problem causing the restart.",
      "parentUuid": "e2d1d469_ccde17d4",
      "range": {
        "startLine": 1001,
        "startChar": 58,
        "endLine": 1001,
        "endChar": 70
      },
      "revId": "29815c648498809a7383943ed43c7085540b34c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4bd2789_1cb4ef84",
        "filename": "public/domain.te",
        "patchSetId": 6
      },
      "lineNbr": 1001,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2023-03-30T21:37:39Z",
      "side": 1,
      "message": "And to be clear, we don\u0027t need camera service to read these, we just want to save / log tombstones somewhere for later debugging (included in the next bugreport, etc). So if we can just tell some privileged daemon to trigger capture, that would be plenty.",
      "parentUuid": "055b55c3_7eeebb16",
      "range": {
        "startLine": 1001,
        "startChar": 58,
        "endLine": 1001,
        "endChar": 70
      },
      "revId": "29815c648498809a7383943ed43c7085540b34c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "922576bc_30c98577",
        "filename": "public/domain.te",
        "patchSetId": 6
      },
      "lineNbr": 1001,
      "author": {
        "id": 1482458
      },
      "writtenOn": "2023-03-31T06:50:49Z",
      "side": 1,
      "message": "As Eddy already mentioned above, what we are trying to acheive is to preserve the stack trace of camera HAL when camera watchdog bites. We faced numbers of customer report about camera malfunction which is related to the HAL deadlock. However, without the proper stack trace, it is nearly impossible to further investigate the root cause of the deadlock which fires camera watchdog.\n\nthe currently CLs are gathering the stack trace with debuggerd_trigger_dump and redirect it to the platform log. So that, the stack trace can be retrived later once bugreport is triggered by user. it is kind of aggresive.\n\nif there is an alternative less privacy concern way to preserve the stack trace, we are more than happy to follow. (Does just sending a kDebuggerd* signal to camera HAL work for this purpose?)",
      "parentUuid": "f4bd2789_1cb4ef84",
      "range": {
        "startLine": 1001,
        "startChar": 58,
        "endLine": 1001,
        "endChar": 70
      },
      "revId": "29815c648498809a7383943ed43c7085540b34c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76d7e5ea_07b620f2",
        "filename": "public/domain.te",
        "patchSetId": 6
      },
      "lineNbr": 1001,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2023-03-31T07:23:01Z",
      "side": 1,
      "message": "\u003e Grabbing a bugreport for every camera service watchdog firing would presumably not be acceptable on released user- builds, though it would make a lot of sense for dogfooding.\n\nbugreports require user consent even on userdebug/dogfood devices. Consent must be granted for each bugreport.\n\n`kill -SIGABRT \u003cpid\u003e` results in a tombstone in the system log. I just tested this on my device. Would that be sufficient?",
      "parentUuid": "922576bc_30c98577",
      "range": {
        "startLine": 1001,
        "startChar": 58,
        "endLine": 1001,
        "endChar": 70
      },
      "revId": "29815c648498809a7383943ed43c7085540b34c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08b333f6_f1af4a06",
        "filename": "public/domain.te",
        "patchSetId": 6
      },
      "lineNbr": 1001,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2023-03-31T07:29:03Z",
      "side": 1,
      "message": "Note that I believe that the above requires that the caller have the same UID as process that it\u0027s killing (or have CAP_KILL, which we don\u0027t want to grant to cameraserver as previously mentioned).",
      "parentUuid": "76d7e5ea_07b620f2",
      "range": {
        "startLine": 1001,
        "startChar": 58,
        "endLine": 1001,
        "endChar": 70
      },
      "revId": "29815c648498809a7383943ed43c7085540b34c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e346387_baa08f3a",
        "filename": "public/domain.te",
        "patchSetId": 6
      },
      "lineNbr": 1001,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2023-03-31T18:27:25Z",
      "side": 1,
      "message": "\u003e kill -SIGABRT \u003cpid\u003e results in a tombstone in the system log. I just tested this on my device. Would that be sufficient?\n\nThe watchdog kills the camera server process via `abort()` which I\u0027d assume (but could be wrong) has the same effect as `kill -SIGABRT`, but that only gets the stack trace of the watchdog thread; we need the stack traces of the rest of the camera service and the camera HAL.  But in case I\u0027m wrong, is there a way to trigger the `kill` behavior from within the process itself?",
      "parentUuid": "08b333f6_f1af4a06",
      "range": {
        "startLine": 1001,
        "startChar": 58,
        "endLine": 1001,
        "endChar": 70
      },
      "revId": "29815c648498809a7383943ed43c7085540b34c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e2a9d23_350c2a7e",
        "filename": "public/domain.te",
        "patchSetId": 6
      },
      "lineNbr": 1001,
      "author": {
        "id": 1482458
      },
      "writtenOn": "2023-04-03T09:28:22Z",
      "side": 1,
      "message": "\u003e but that only gets the stack trace of the watchdog thread;\n\nI want to clarify one thing. the watchdog successfully creates a tombstone for the camera server process aith `abort()`.\n\nthe problem was the HAL process, which is restarted with `onrestart class_restart`. the HAL is restarted when watchdog aborts the camera server, but there is no debug info was left.\n\nAfter some testing, it looks like that sending SIGABRT to the HAL process creates a tomestone, and restart the HAL as intended. (if they are started with the same used id)\n\nSo, I\u0027ve updated the CLs not to directly rely on `debuggerd_trigger_dump`. Please take a look.",
      "parentUuid": "3e346387_baa08f3a",
      "range": {
        "startLine": 1001,
        "startChar": 58,
        "endLine": 1001,
        "endChar": 70
      },
      "revId": "29815c648498809a7383943ed43c7085540b34c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}