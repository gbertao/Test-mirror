{
  "comments": [
    {
      "key": {
        "uuid": "e9865619_ef8d0a92",
        "filename": "public/domain.te",
        "patchSetId": 5
      },
      "lineNbr": 253,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2018-11-12T20:31:53Z",
      "side": 1,
      "message": "This feels overly broad. If this is only used by ART related processes, it feels like it should be limited to ART using processes.",
      "revId": "aff18ad512e1c9ecf063359ca0822eabb5492c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dce6b9d0_711f1a0f",
        "filename": "public/domain.te",
        "patchSetId": 5
      },
      "lineNbr": 253,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2018-11-12T21:00:56Z",
      "side": 1,
      "message": "It is not only for ART. It is for all processes who dynamically linking libc.so. Which are almost everyone.\n\nIf possible, I would prefer to only allow the code in libc.so to read this file. But I don\u0027t think there\u0027s any reliable way to do that.",
      "parentUuid": "e9865619_ef8d0a92",
      "revId": "aff18ad512e1c9ecf063359ca0822eabb5492c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd5927fb_690d20b7",
        "filename": "public/property_contexts",
        "patchSetId": 5
      },
      "lineNbr": 336,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-11-12T18:48:01Z",
      "side": 1,
      "message": "This list is meant to be alphabetized.",
      "revId": "aff18ad512e1c9ecf063359ca0822eabb5492c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8457980a_331eac8a",
        "filename": "public/property_contexts",
        "patchSetId": 5
      },
      "lineNbr": 336,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2018-11-12T20:31:53Z",
      "side": 1,
      "message": "exported_default_prop is exported to every processes, which feels overly broad. Why was the decision made to reuse this label vs creating a new label?\n\nIn particular, are the properties considered the source of truth, or is the /dev//dev/cpu_variant: files the source of truth? Why export it to both locations?",
      "revId": "aff18ad512e1c9ecf063359ca0822eabb5492c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccb09ac8_fd6c1902",
        "filename": "public/property_contexts",
        "patchSetId": 5
      },
      "lineNbr": 336,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-11-12T21:03:52Z",
      "side": 1,
      "message": "+1 this is only actually used as a way for init to write to these /dev entries based on the property that it reads from vendor/default.prop, right?  This can be restricted to literally just init in this case; definitely doesn\u0027t need to be exported to vendor processes.",
      "parentUuid": "8457980a_331eac8a",
      "revId": "aff18ad512e1c9ecf063359ca0822eabb5492c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3274787_ba167e4c",
        "filename": "public/property_contexts",
        "patchSetId": 5
      },
      "lineNbr": 336,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2018-11-12T21:08:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd5927fb_690d20b7",
      "revId": "aff18ad512e1c9ecf063359ca0822eabb5492c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5010a77c_44c6674a",
        "filename": "public/property_contexts",
        "patchSetId": 5
      },
      "lineNbr": 336,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2018-11-12T21:08:01Z",
      "side": 1,
      "message": "The reason to write to both is that, when we need it to make decision in an ifunc, libc itself is not linked. So it is difficult to read from a system property. Instead we use syscall directly to read from the file.\n\nI\u0027ll look into the way to have a new label... Sorry not quite familiar with SELinux.",
      "parentUuid": "8457980a_331eac8a",
      "revId": "aff18ad512e1c9ecf063359ca0822eabb5492c4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}