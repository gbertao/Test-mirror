{
  "comments": [
    {
      "key": {
        "uuid": "73cdb5e4_fc8768f3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-01-03T22:24:29Z",
      "side": 1,
      "message": "shouldn\u0027t be in a commit message",
      "range": {
        "startLine": 10,
        "startChar": 5,
        "endLine": 10,
        "endChar": 23
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3239cff_19bedcc6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-01-03T22:09:24Z",
      "side": 1,
      "message": "Not sure if this gives us any warm and fuzzies. I think the only part architecturally similar is the use of sockets, and that commands or output data are on a separate socket from incoming data ;-\u003e (logd separates commands from incoming data, and have regretted many times that commands have no MAC protections).",
      "range": {
        "startLine": 14,
        "startChar": 32,
        "endLine": 14,
        "endChar": 71
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c52dea08_3c5eeb9a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 22,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-01-03T22:09:24Z",
      "side": 1,
      "message": "I am a proponent of multi level security. DAC _and_ MAC controls, where one slips-up, the other might catch. shell is in some respects a gaping hole with regards to security, any/all executables run from that domain can do whatever they want.",
      "range": {
        "startLine": 20,
        "startChar": 5,
        "endLine": 22,
        "endChar": 11
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75d662e0_d424b837",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-01-03T22:09:24Z",
      "side": 1,
      "message": "the service names here do not match the names in traced.rc?",
      "range": {
        "startLine": 23,
        "startChar": 3,
        "endLine": 23,
        "endChar": 16
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b01d7ce5_05267da0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-01-03T22:09:24Z",
      "side": 1,
      "message": "This is only accessible on userdebug and eng builds. Based on security review, you may need to ensure that the associated attack surface for this daemon is minimized on user builds.\n\nSelect selinux rules should be audited, and wrapped with userdebug_or_eng(`...\u0027) macro. Runtime should check if a debuggable build (liblog provides __android_log_is_debuggable()) to turn off features, rc files may need to be split, the debug versions/fragments landing under another name etc etc.",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 24,
        "endChar": 62
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5be43df_d4ea96e3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2018-01-04T06:56:40Z",
      "side": 1,
      "message": "\u003e This is only accessible on userdebug and eng builds.\n\nIs that true? Is this a debug-build-only feature?",
      "parentUuid": "b01d7ce5_05267da0",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 24,
        "endChar": 62
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb996bc4_6918185a",
        "filename": "private/traced.te",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2018-01-04T06:56:40Z",
      "side": 1,
      "message": "I believe this is all correctly handled by the \"init_daemon_domain()\" macro. So instead just use\ninit_daemon_domain(traced)",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 11,
        "endChar": 42
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8c1b1eb_6fc1ac3f",
        "filename": "private/traced.te",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2018-01-04T06:56:40Z",
      "side": 1,
      "message": "This neverallow rules prevents ptracing any process, not just apps.",
      "range": {
        "startLine": 25,
        "startChar": 19,
        "endLine": 25,
        "endChar": 22
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ea0c3c4_a72dc35b",
        "filename": "private/traced.te",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2018-01-04T06:56:40Z",
      "side": 1,
      "message": "*",
      "range": {
        "startLine": 26,
        "startChar": 18,
        "endLine": 26,
        "endChar": 24
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db7d858d_ad9cee33",
        "filename": "private/traced.te",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2018-01-04T06:56:40Z",
      "side": 1,
      "message": "This is already covered by a neverallow rule for all processes: https://android.googlesource.com/platform/system/sepolicy/+/master/public/domain.te#406",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 55
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6c41aa9_da690ebd",
        "filename": "private/traced_probes.te",
        "patchSetId": 6
      },
      "lineNbr": 5,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2018-01-04T06:56:40Z",
      "side": 1,
      "message": "It\u0027s unusual that traced and traced_probes have the same executable. Why is that?\n\nIt would be much simpler (from a security standpoint) if each of these domains had their own entrypoint i.e. their own executable.",
      "range": {
        "startLine": 5,
        "startChar": 19,
        "endLine": 5,
        "endChar": 30
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb4561a6_4f74e2fc",
        "filename": "private/traced_probes.te",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1026553
      },
      "writtenOn": "2018-01-02T11:47:04Z",
      "side": 1,
      "message": "Not sure how the namespacing works here but would traced_probes_tmpfs be more appropriate?",
      "range": {
        "startLine": 9,
        "startChar": 41,
        "endLine": 9,
        "endChar": 53
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9ebb9ca_9dece8da",
        "filename": "private/traced_probes.te",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2018-01-02T15:58:29Z",
      "side": 1,
      "message": "This is where I got lost. I think that the last term is relative to the target label, not source? In all honesty I can\u0027t quite figure out how the tmpfs check work here.\nI was surprised I did hit this at all, but it seems that even passing the FD over a socket is subjected to this selinux check.",
      "parentUuid": "bb4561a6_4f74e2fc",
      "range": {
        "startLine": 9,
        "startChar": 41,
        "endLine": 9,
        "endChar": 53
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4a8845e_51d7e37d",
        "filename": "private/traced_probes.te",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1026553
      },
      "writtenOn": "2018-01-02T11:47:04Z",
      "side": 1,
      "message": "I guess we wouldn\u0027t need this if we got write_traced() into some more general domain? Or maybe it\u0027s best just allow this for zygote-spawned stuff and then opt-in other daemons once they start producing trace data.\n\n(Just checked that write_logd is there for all domains but for this it might make sense to start smaller.)",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 7
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b869fc4_250d1ad1",
        "filename": "private/traced_probes.te",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2018-01-02T15:58:29Z",
      "side": 1,
      "message": "\u003e I guess we wouldn\u0027t need this if we got write_traced() into some more general domain?\nYes correct.\nThe only reason why this is here is because I failed to add to the general domain.te because I was getting warnings for neverallow checks coming from treble.\n\n\u003e Or maybe it\u0027s best just allow this for zygote-spawned stuff and then opt-in other daemons once they start producing trace data.\nHmm no there are too many labels that we want to be able to connect here.\n\n\u003e (Just checked that write_logd is there for all domains but for this it might make sense to start smaller.)\nYeah ideally we should do the same. I just couldn\u0027t figure out the magic that makes logd work for treble neverallow rules.",
      "parentUuid": "f4a8845e_51d7e37d",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 7
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38e67e0b_c6a1e2e5",
        "filename": "private/untrusted_app.te",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2018-01-04T06:56:40Z",
      "side": 1,
      "message": "currently already covered by the rule for appdomain (which is a Treble violation)",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 27
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cf32c25_9332df71",
        "filename": "public/domain.te",
        "patchSetId": 6
      },
      "lineNbr": 616,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2018-01-04T06:56:40Z",
      "side": 1,
      "message": "I suspect that you\u0027re violating these neverallows due to:\nwrite_traced(appdomain)\n\nAll apps, including vendor provided apps (which are not coredomain) have the appdomain attribute. You can avoid this by only granting apps with the coredomain attribute access to these sockets.",
      "range": {
        "startLine": 616,
        "startChar": 5,
        "endLine": 616,
        "endChar": 11
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d6b50c9_c299dd29",
        "filename": "public/shell.te",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2018-01-04T06:56:40Z",
      "side": 1,
      "message": "shell?",
      "range": {
        "startLine": 16,
        "startChar": 13,
        "endLine": 16,
        "endChar": 21
      },
      "revId": "d1765109e4cb9337a78a4d00216f02b88d82b9e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}