{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7f7fdfd3_2e7caef9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2024-02-14T19:09:23Z",
      "side": 1,
      "message": "Have you thought about how Sepolicies will work with partitions in soong? We will likely need to have product-specific sepolicy modules like the product-specific partitions. If we had those, we wouldn\u0027t need to do this reverse dependency stuff, individual products could add flags to their own sepolicy modules.\n\nReverse dependencies are undesirable because if you only download a portion of the source tree, you get different results. And you need to download the full source tree in order to figure out the minimal set of files in order to build your desired module.",
      "revId": "09a4ba836de4cc2d7c73b7248370ed9aeed25beb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ad5196e_24fc21b0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-02-14T08:18:47Z",
      "side": 1,
      "message": "Why is this bad? Has there been complaints from partners?",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 9,
        "endChar": 65
      },
      "revId": "09a4ba836de4cc2d7c73b7248370ed9aeed25beb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c113ab5_bd32e953",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2024-02-14T08:26:11Z",
      "side": 1,
      "message": "It\u0027s not bad (actually this is good if AOSP flags are all of them), but as long as we\u0027ve decided to support partners I think it\u0027s more reasonable to allow flags outside system/sepolicy. Partners can flag-guard their own code without upstreaming to system/sepolicy (thus avoiding possible leaks).\n\nIMO allowing it makes more sense because we\u0027re already supporting `.scl` files for partners. Some internal targets are already using their own `.scl` files outside AOSP projects.",
      "parentUuid": "9ad5196e_24fc21b0",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 9,
        "endChar": 65
      },
      "revId": "09a4ba836de4cc2d7c73b7248370ed9aeed25beb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2f0ca87_4f4a0f06",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-02-14T09:10:18Z",
      "side": 1,
      "message": "Ok. We obviously don\u0027t want to reveal Pixel-specific flags there.",
      "parentUuid": "9c113ab5_bd32e953",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 9,
        "endChar": 65
      },
      "revId": "09a4ba836de4cc2d7c73b7248370ed9aeed25beb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10142c64_00360ab6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2024-02-14T05:05:51Z",
      "side": 1,
      "message": "@tweek@google.com @jiyong@google.com for sepolicy review\n\n@joeo@google.com for flagging / build system review",
      "revId": "09a4ba836de4cc2d7c73b7248370ed9aeed25beb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "117409c0_6b904455",
        "filename": "build/soong/flags.go",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2024-02-14T19:09:23Z",
      "side": 1,
      "message": "Should this be `se_flags_collector`? Same in the comment in `flaggableModuleProperties`",
      "range": {
        "startLine": 79,
        "startChar": 8,
        "endLine": 79,
        "endChar": 31
      },
      "revId": "09a4ba836de4cc2d7c73b7248370ed9aeed25beb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caf22244_b920032e",
        "filename": "build/soong/flags.go",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2024-02-14T19:09:23Z",
      "side": 1,
      "message": "Please use a provider instead of casting to a specific module type or interface. Same in `getBuildFlags`.",
      "revId": "09a4ba836de4cc2d7c73b7248370ed9aeed25beb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b94733a_5f3c1576",
        "filename": "flagging/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-02-14T08:18:47Z",
      "side": 1,
      "message": "I would call this aosp_selinux_flags to highlight that this is for aosp-defined flags.",
      "range": {
        "startLine": 18,
        "startChar": 11,
        "endLine": 18,
        "endChar": 19
      },
      "revId": "09a4ba836de4cc2d7c73b7248370ed9aeed25beb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67a8d6f7_8f0004f7",
        "filename": "flagging/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1561651
      },
      "writtenOn": "2024-02-14T05:40:33Z",
      "side": 1,
      "message": "IIUC, this se_flags_collector will implicitly include all the se_flags found? Do you think we would need at some point to only have a subgroup of these? If not, maybe we could simplify the interface by keeping the se_flags definition, remove se_flags_collector and replace se_policy_conf_defaults with something like:\n\n```\nse_policy_conf_defaults {\n    name: \"se_policy_conf_flags_defaults\",\n    srcs: [\":sepolicy_flagging_macros\"],\n    include_se_flags: true,\n}\n```\n\nI don\u0027t know if this is possible from Soong\u0027s point of view (Can the Singleton be implicitly declared?).\n\nIf we want subgroups, we could add a \"tag\" to group these se_flags with something like:\n```\nse_flags {\n    name: \"default_aosp_se_flags\",\n    tag: \"default\",\n    flags: [\n        \"RELEASE_AVF_ENABLE_DEVICE_ASSIGNMENT\",\n        \"RELEASE_HARDWARE_BLUETOOTH_RANGING_SERVICE\",\n    ],\n}\nse_flags_collector {\n    name: \"default_aosp_flags\",\n    tag: \"default\",\n}   \n```\n\nThis would clarify the link between se_flags and the collector (with maybe a \"default\" tag for all se_flags).",
      "revId": "09a4ba836de4cc2d7c73b7248370ed9aeed25beb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7ced3b9_fa5d7a74",
        "filename": "flagging/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2024-02-14T06:02:12Z",
      "side": 1,
      "message": "\u003e Do you think we would need at some point to only have a subgroup of these?\n\nI think we shouldn\u0027t need subgroups, as unused flags or undefined flags have no effect.\n\n\u003e If not, maybe we could simplify the interface by keeping the se_flags definition, remove se_flags_collector and replace se_policy_conf_defaults with something like:\n\nThere will be only one `se_flags_collector` module (which is guaranteed by Soong), and I think `include_se_flags: true` seems more implicit. Probably @joeo@google.com can take a look and teach us which is preferrable?\n\n\u003e I don\u0027t know if this is possible from Soong\u0027s point of view (Can the Singleton be implicitly declared?).\n\nOne downside of this is: it introduces a new global state to Soong (to store a list of all `se_flags` modules).",
      "parentUuid": "67a8d6f7_8f0004f7",
      "revId": "09a4ba836de4cc2d7c73b7248370ed9aeed25beb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "210aa3ac_b0a38d64",
        "filename": "flagging/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2024-02-14T19:09:23Z",
      "side": 1,
      "message": "In the bug, you had a design involving `export_to`, I think that\u0027s better. Even if we only have 1 global seflags set today, we should design for extensibility.",
      "parentUuid": "d7ced3b9_fa5d7a74",
      "revId": "09a4ba836de4cc2d7c73b7248370ed9aeed25beb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad9f36a4_ae54ee5d",
        "filename": "flagging/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-02-14T08:18:47Z",
      "side": 1,
      "message": "and call this `all_selinux_flags` or similar.",
      "range": {
        "startLine": 27,
        "startChar": 11,
        "endLine": 27,
        "endChar": 29
      },
      "revId": "09a4ba836de4cc2d7c73b7248370ed9aeed25beb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}