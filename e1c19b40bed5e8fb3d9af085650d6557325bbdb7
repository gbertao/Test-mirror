{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f6ee7fe5_6d9da2cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-05-26T15:58:42Z",
      "side": 1,
      "message": "you should just be able to call uname(2), no? or does selinux get in the way of that too?\n\n(though that might be an argument for just saying \"yeah, no point hiding this property if it\u0027s trivially available via other means\" anyway!)",
      "revId": "e1c19b40bed5e8fb3d9af085650d6557325bbdb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "197aaf35_9c9c5ddd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1950557
      },
      "writtenOn": "2022-05-27T01:50:50Z",
      "side": 1,
      "message": "good morning ,Mr Hughes,\n\nyes,uname call is the most commonly used way to fetched kernel version. Sometimes android app developers prefer to use property to get some informationes such as other properties provided by Build.java.\n\nuname is linux style, property is a specific way for android.\n\ni think property is useful but not the only way.\n\nthanks.",
      "parentUuid": "f6ee7fe5_6d9da2cb",
      "revId": "e1c19b40bed5e8fb3d9af085650d6557325bbdb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04a9a779_1040436c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2022-05-27T01:55:42Z",
      "side": 1,
      "message": "Elliott,\n\nI think this is nice to have, as long as init internally uses this property. Publishing it as an API is another problem, but I\u0027d like to, at least, label the property rather than leaving it as `default_prop`.\n\nCan we submit this first, without the frameworks/base change?",
      "parentUuid": "197aaf35_9c9c5ddd",
      "revId": "e1c19b40bed5e8fb3d9af085650d6557325bbdb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f47bd179_7f012400",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1950557
      },
      "writtenOn": "2022-05-30T06:22:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04a9a779_1040436c",
      "revId": "e1c19b40bed5e8fb3d9af085650d6557325bbdb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc7ecd5d_4ddcb3db",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1950557
      },
      "writtenOn": "2022-05-30T06:22:56Z",
      "side": 1,
      "message": "Good morning, any update?\n\nthanks.",
      "revId": "e1c19b40bed5e8fb3d9af085650d6557325bbdb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6930c2c3_ea0dca41",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1950557
      },
      "writtenOn": "2022-05-31T07:48:54Z",
      "side": 1,
      "message": "hi,Mr hughes,\n\nThis property is internally used by init.\nOther process can use uname(2) to get kernel version as before, and others can not read the property if it is removed from domain.te .\n\nthanks.",
      "parentUuid": "f47bd179_7f012400",
      "revId": "e1c19b40bed5e8fb3d9af085650d6557325bbdb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5910978_74784fff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-05-31T17:58:07Z",
      "side": 1,
      "message": "`ro.kernel.version` is explicitly _less_ informative than uname(2):\n```\n/// Set ro.kernel.version property to contain the major.minor pair as returned\n/// by uname(2).\nstatic void SetKernelVersion() {\n    struct utsname uts;\n    unsigned int major, minor;\n\n    if ((uname(\u0026uts) !\u003d 0) || (sscanf(uts.release, \"%u.%u\", \u0026major, \u0026minor) !\u003d 2)) {\n        LOG(ERROR) \u003c\u003c \"Could not parse the kernel version from uname\";\n        return;\n    }\n    SetProperty(\"ro.kernel.version\", android::base::StringPrintf(\"%u.%u\", major, minor));\n}\n```\ni don\u0027t understand why we\u0027d want this change, given that it\u0027s _less_ useful than uname(2). (the idea behind the property is that it\u0027s convenient for tests in .rc files, so they don\u0027t need to worry about 5.19.2 or 5.19-rc1 or whatever. but for debugging/diagnostic purposes, i\u0027d be pretty annoyed if my bugreport contained \"5.19\" rather than the full truth...)\n\npersonally i\u0027d see more value to explicitly marking this property as \"implementation detail for init\u0027s use only\". i\u0027d +1 _that_ change :-)",
      "parentUuid": "6930c2c3_ea0dca41",
      "revId": "e1c19b40bed5e8fb3d9af085650d6557325bbdb7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}