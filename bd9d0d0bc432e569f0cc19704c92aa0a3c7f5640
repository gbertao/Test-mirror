{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9e862e13_8d3a9615",
        "filename": "private/coredomain.te",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2021-05-20T00:35:32Z",
      "side": 1,
      "message": "remove?",
      "revId": "bd9d0d0bc432e569f0cc19704c92aa0a3c7f5640",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fba7acd_903c62dc",
        "filename": "private/property_contexts",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2021-05-20T00:35:32Z",
      "side": 1,
      "message": "We don\u0027t need to compress property_contexts entries, and we are encouraging to use exact entries.",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 337,
        "endChar": 0
      },
      "revId": "bd9d0d0bc432e569f0cc19704c92aa0a3c7f5640",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "777fb0dc_f6557993",
        "filename": "private/property_contexts",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-05-20T14:45:49Z",
      "side": 1,
      "message": "What do you mean by compress property_context entries? Should I use another syntax? (sorry if I\u0027m a bit unfamiliar).\n\nUnfortunately we can\u0027t use exact entries because that would block us introducing any new property in the ART module without updating the unupdatable selinux rules defying one of the module goals.",
      "parentUuid": "0fba7acd_903c62dc",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 337,
        "endChar": 0
      },
      "revId": "bd9d0d0bc432e569f0cc19704c92aa0a3c7f5640",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52d23c48_c3fb3077",
        "filename": "private/property_contexts",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2021-05-20T15:44:33Z",
      "side": 1,
      "message": "Sorry for confusion. What I meant is that we recommend using exact entries whenever possible, not the prefix entries. (which reduces the number of entries) One reason to do that is compatibility. I see some of the `dalvik.vm.*` properties written by vendor. Such properties should be exact to avoid silent breakage.\n\n\u003e Unfortunately we can\u0027t use exact entries because that would block us introducing any new property in the ART module without updating the unupdatable selinux rules defying one of the module goals.\n\nDo you mean that the ART module can be updated independently, with introducing some new properties? If the properties are only for the ART module, (e.g. vendor doesn\u0027t set the properties) we could use prefix entries, but we should use system_internal_prop. If the new property can be read/written outside the ART module, how can the other components recognize the new properties and use them?",
      "parentUuid": "777fb0dc_f6557993",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 337,
        "endChar": 0
      },
      "revId": "bd9d0d0bc432e569f0cc19704c92aa0a3c7f5640",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cadc638_862c8d55",
        "filename": "private/property_contexts",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-05-20T17:32:09Z",
      "side": 1,
      "message": "Np, thanks for the clarification.\n\nThe ART module will never write the properties (as we don\u0027t have standalone processes, the code runs inside the app / system server process etc).\n\nHowever we want to be able to read new ones without having to configure the selpolicy for each individual one.\n\nThese \"new properties\" can be passed down as:\n1) device config. These are persist.device_config.runtime_native. and persist.device_config.runtime_native_boot. which are already defined as prefix. This will satisfy the need to react to server side experiments / configuration.\n\n2) system property. After more thinking, having a prefix here is probably not strictly needed because we already have 1). However it will be pretty beneficial because:\na) consistency: all device config properties have a system property counterpart, so that it can be set with a default value when a server side config is not available.\nb) development/debug: it will be much easier for us when testing new feature to set system properties without having to create sepolicy CLs.\n\n\nTo answer your direct questions\n\"Do you mean that the ART module can be updated independently, with introducing some new properties?\" \nYes, the goal for example is that in Module version X we introduce a feature that requires server side configuration. In ART module we will simply add the code to read that property without having to update sepolicies. The server side can configure the device_config or an OEM could set that property on an older platform knowing that a new module, may leverage it.\n\n\"If the properties are only for the ART module, (e.g. vendor doesn\u0027t set the properties) we could use prefix entries, but we should use system_internal_prop.\"\n\nFor the dalvik.vm.* properties, I think it\u0027s beneficial to let vendor still set them.\n\n\"If the new property can be read/written outside the ART module, how can the other components recognize the new properties and use them?\"\n\nThe new properties will only be writable by system server / vendor (same way as the current properties). But only the code in ART will consume them (which is part of the module).\n\n\nLemme know if this clarifies things. And also, what\u0027s the disadvantage to have the prefix notation for dalvik.vm.* ? I understand that an exact definition is more controllable, but I don\u0027t think in our case it can lead to silent breakages because these props are usually advisory to how ART works.",
      "parentUuid": "52d23c48_c3fb3077",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 337,
        "endChar": 0
      },
      "revId": "bd9d0d0bc432e569f0cc19704c92aa0a3c7f5640",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca1cba3d_08798d4b",
        "filename": "private/property_contexts",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2021-05-21T02:53:18Z",
      "side": 1,
      "message": "\u003e Yes, the goal for example is that in Module version X we introduce a feature that requires server side configuration. In ART module we will simply add the code to read that property without having to update sepolicies. The server side can configure the device_config or an OEM could set that property on an older platform knowing that a new module, may leverage it.\n\n\u003e The new properties will only be writable by system server / vendor (same way as the current properties). But only the code in ART will consume them (which is part of the module).\n\n\u003e Lemme know if this clarifies things. And also, what\u0027s the disadvantage to have the prefix notation for dalvik.vm.* ? I understand that an exact definition is more controllable, but I don\u0027t think in our case it can lead to silent breakages because these props are usually advisory to how ART works.\n\nThis sounds as if ART could add implicit APIs between system server and vendor. We want any properties crossing the Treble boundary to be defined clearly.\n\nIf you\u0027re 100% sure that this won\u0027t break and won\u0027t cause any problems, I\u0027d like to at least have the properties documented (maybe in a comment somewhere, or README.md under ART directories, etc.), and then keep the access minimal by adding neverallow rules.\n\nJiyong and Jeffrey, any comments?",
      "parentUuid": "1cadc638_862c8d55",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 337,
        "endChar": 0
      },
      "revId": "bd9d0d0bc432e569f0cc19704c92aa0a3c7f5640",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ae1c925_57bb205b",
        "filename": "private/property_contexts",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-05-21T03:56:25Z",
      "side": 1,
      "message": "dalvik_config_prop is defined as system_vendor_config_prop, which means those system properties are shared with the vendor. So we need to keep the system properties backwards compatible, just like other APIs used across the ART module boundaries. Otherwise, an ART update has a risk to break the vendor partition.\n\nHaving these exact matching rules is one way of keeping tracking of the backwards compatibility.\n\nAfter you remove these exact matching rules here, how will you going to keep the backwards compatibility of the properties within ART?",
      "parentUuid": "ca1cba3d_08798d4b",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 337,
        "endChar": 0
      },
      "revId": "bd9d0d0bc432e569f0cc19704c92aa0a3c7f5640",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d328d0ef_8a1effca",
        "filename": "private/property_contexts",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-05-21T14:55:08Z",
      "side": 1,
      "message": "Thanks for the feedback Inseob, Jiyong.\n\nWhat sort of backwards compatibility concerns you have?\n\nI view the system properties that concerns ART as hint towards the runtime which will tune certain features. Alll dalvik.vm. props should only be used to configured or tune runtime behaviour and not other parts of the system.\n\nART never really offered a contract that a given property will be honored and the interpretation of some properties did change release after release.\n\nYes, vendors are allowed to set the properties, and should still be able to so. Using a prefix only allows us for example to a offer a new tunable feature in a module update without having to wait for a platform release (part of the module goals).\n\nAre you concerned that for example vendors might use dalvik.vm.* properties for things that are ART-unrelated?\n\nI am happy for example to introduce a new \"art.vm.\" prefix if you think that\u0027s better and removes your concerns (though they are quite equivalent).",
      "parentUuid": "4ae1c925_57bb205b",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 337,
        "endChar": 0
      },
      "revId": "bd9d0d0bc432e569f0cc19704c92aa0a3c7f5640",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "731e123f_ded44b66",
        "filename": "private/property_contexts",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-05-21T14:57:47Z",
      "side": 1,
      "message": "(Oh, and yes, we should document all properties that ART can re-act to :), irrespective of this change)",
      "parentUuid": "d328d0ef_8a1effca",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 337,
        "endChar": 0
      },
      "revId": "bd9d0d0bc432e569f0cc19704c92aa0a3c7f5640",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "225acbb4_c248737d",
        "filename": "private/property_contexts",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-05-22T08:03:44Z",
      "side": 1,
      "message": "\u003e ART never really offered a contract that a given property will be honored and the interpretation of some properties did change release after release\n\nOk. I now understand where this came from. I didn\u0027t know that those properties have been just hints, but I am not sure if that\u0027s the right policy even after ART becomes a Google-owned updatable module. When ART was part of the platform, OEMs have the full responsibility of the device\u0027s performance and health and they had a chance to adjust to the changes we have made to the knobs in the new release.\n\nNow, part (most?) of the responsibility is on us. If the knobs are unreliable (for example, a knob can be removed or renamed), how would we make sure that an ART update doesn\u0027t regress the performance and health?\n\nI think we need to have a minimal set of system properties that we guarantee their existence and semantic over a couple of years. We may use sepolicy to keep the guarantee, but if the ART team has their own way of doing that I don\u0027t object to it.",
      "parentUuid": "731e123f_ded44b66",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 337,
        "endChar": 0
      },
      "revId": "bd9d0d0bc432e569f0cc19704c92aa0a3c7f5640",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acf418b3_cdf9343f",
        "filename": "private/property_contexts",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2021-05-24T15:21:35Z",
      "side": 1,
      "message": "I don\u0027t really have an issue with fixing some properties in the selinux config, as long as we also have a prefix notations to give us the flexible to move forward. \n\nWe could leave the ones already defined as is, and just add an extra `dalvik.vm.` or `art.vm.` if we cannot defined both, prefix, and fixed property in selinux.\n\nThat\u0027s a bit redundant IMO but I can understand Jiyong concerns.\n\nOrion/Nicolas what are your thoughts on this?",
      "parentUuid": "225acbb4_c248737d",
      "range": {
        "startLine": 333,
        "startChar": 0,
        "endLine": 337,
        "endChar": 0
      },
      "revId": "bd9d0d0bc432e569f0cc19704c92aa0a3c7f5640",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}