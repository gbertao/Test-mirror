{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1887c3ca_3c466b30",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-01-12T03:48:30Z",
      "side": 1,
      "message": "This path should never activate due to the device-mapper layering created by dm-default-key (which is required since Android R). Does this device have metadata encryption enabled?",
      "revId": "b70ac44d8d1cf998d3d4744b92057cd22e5c3f14",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dadf0e22_4c721e08",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 2005646
      },
      "writtenOn": "2024-01-12T05:30:43Z",
      "side": 1,
      "message": "@dvander@google.com: good point! This was seen on an Android R device _without_ metadata encryption enabled (i.e. the userdata mount doesn\u0027t use dm).\n\n\u003e which is required since Android R\n\nWhile the device in question is probably misconfigured, I\u0027m curious how this is enforced -- is it only via tests (VTS)?\n\nVTS compliance aside, given that fs_mgr technically still seems to support this mode (judging by the `!can_use_devicemapper` fallback), I wonder if it\u0027s worth merging this? Perhaps with a clarification in the commit message that it only applies to devices with no FBE or no metadata encryption.\n\nAlternatively, we could just add a note to fs_mgr that the code path is deprecated and isn\u0027t guaranteed to work.",
      "parentUuid": "1887c3ca_3c466b30",
      "revId": "b70ac44d8d1cf998d3d4744b92057cd22e5c3f14",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f0e6244_11ed197f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-01-16T16:46:26Z",
      "side": 1,
      "message": "The VTS test is vts_kernel_encryption_test.\n\nI think adding a comment about it being unsupported is a good idea. This path receives no testing of any kind and we should probably remove it (or disable it based on launch version).",
      "parentUuid": "dadf0e22_4c721e08",
      "revId": "b70ac44d8d1cf998d3d4744b92057cd22e5c3f14",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd64c0bc_19eb7301",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 2005646
      },
      "writtenOn": "2024-01-16T17:48:50Z",
      "side": 1,
      "message": "My main concern is that `update_engine` currently seems to have an implicit dependency on either using compressed snapshots (the problematic code path doesn\u0027t activate if using snapuserd AFAICT) or metadata encryption, and the failure mode is not obvious -- especially since update_engine will work fine in the presumably more common case where there\u0027s enough space on `super` for COW partitions (no COW images are mapped from userdata).\n\nGiven that, as I understand it (please correct me if I\u0027m wrong!), it\u0027s technically still possible to ship a device without metadata encryption (VTS compliance isn\u0027t mandatory), I wonder if there a good way to make the dependency explicit? Perhaps something that update_engine could assert on (fail early)?",
      "parentUuid": "1f0e6244_11ed197f",
      "revId": "b70ac44d8d1cf998d3d4744b92057cd22e5c3f14",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}