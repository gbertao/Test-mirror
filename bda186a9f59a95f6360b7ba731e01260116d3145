{
  "comments": [
    {
      "key": {
        "uuid": "fc88a86f_8819c512",
        "filename": "private/apexd.te",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2018-10-03T21:56:44Z",
      "side": 1,
      "message": "can you please try https://android-review.googlesource.com/c/platform/system/sepolicy/+/777176 instead? SELinux by default generates denials for access() related calls (not just open() related calls). However, we can suppress access() denials without suppressing open() denials.",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 82
      },
      "revId": "bda186a9f59a95f6360b7ba731e01260116d3145",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76ad3d27_977481c2",
        "filename": "private/apexd.te",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-10-03T23:03:14Z",
      "side": 1,
      "message": "That doesn\u0027t seem to fix it, but haven\u0027t had a chance to look into it deeper. When removing these lines again and applying your CL, I get the old denial back:\n\n10-03 23:00:02.506 W/apexd   ( 2588): type\u003d1400 audit(0.0:11): avc: denied { dac_override } for capability\u003d1 scontext\u003du:r:apexd:s0 tcontext\u003du:r:apexd:s0 tclass\u003dcapability permissive\u003d0",
      "parentUuid": "fc88a86f_8819c512",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 82
      },
      "revId": "bda186a9f59a95f6360b7ba731e01260116d3145",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5b86fc5_4580a2ac",
        "filename": "private/apexd.te",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-10-03T23:15:09Z",
      "side": 1,
      "message": "policy does contain it:\n\n$ sesearch --dontaudit $OUT/obj/ETC/sepolicy_intermediates/sepolicy | grep -i cgroup\ndontaudit domain cgroup:file { create audit_access };",
      "parentUuid": "76ad3d27_977481c2",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 82
      },
      "revId": "bda186a9f59a95f6360b7ba731e01260116d3145",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a666769a_182e7929",
        "filename": "private/apexd.te",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2018-10-04T00:08:39Z",
      "side": 1,
      "message": "And you get the same result if you pull the running policy from the device, right? \"adb pull /sys/fs/selinux/policy \u0026\u0026 sesearch --dontaudit -s apexd -t cgroup -p audit_access ./policy\"?\n\nThe problem with checking in dontaudit statements like the one on line 39 is that the tend to make it harder to debug real problems, so their use is discouraged.\n\nIf we really believe this is still an access() issue, can we try this instead:\n\n  dontaudit domain cgroup:{ file dir } audit_access;\n\nas perhaps the access call is triggering on some aspect of the directory, not the file.\n\nI feel like I\u0027m grasping for straws here though. If you wanted to check it in with the dontaudit on line 39, I\u0027d be fine with that. Having said that, I\u0027d really like to understand the root cause of this, not just suppress it.",
      "parentUuid": "f5b86fc5_4580a2ac",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 82
      },
      "revId": "bda186a9f59a95f6360b7ba731e01260116d3145",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6599a530_30e07bb2",
        "filename": "private/apexd.te",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-10-04T00:52:53Z",
      "side": 1,
      "message": "yeah, on-device policy is the same, and adding dir doesn\u0027t help.\n\nI wonder whether the audit_access merely helps if we don\u0027t actually have SELinux permission to read the file. In this case we give that permission to everyone:\n\nallow domain cgroup:file w_file_perms;\n\nso I wonder if what happens is:\n1) filesystem looks up ACL of /dev/cpuset/tasks; it sees that the ACL doesn\u0027t match (0644 system:system and we\u0027re root trying to see if we can write)\n2) It checks for dac_override cap, and fails, because the process doesn\u0027t have it\n3) This check is what logs the audit\n4) We don\u0027t even try to do selinux checks on the file itself anymore\n\nThe article goes on to say that if you *did* allow dac_override because the process needs it, you can still get denials, because there may be files that SELinux policy doesn\u0027t allow you to read - even if you have dac_override. But if you don\u0027t care about those denials, because they are access() calls that are ok to fail, you can use audit_access to suppress them.",
      "parentUuid": "a666769a_182e7929",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 82
      },
      "revId": "bda186a9f59a95f6360b7ba731e01260116d3145",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61dcdfb9_1f82ef3d",
        "filename": "private/apexd.te",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-10-04T00:57:11Z",
      "side": 1,
      "message": "A brief look at fs/namei.c in the kernel does suggest that\u0027s the case.\n\nhttps://github.com/torvalds/linux/blob/master/fs/namei.c#L451\n\nwe call do_inode_permission(), and if it fails, we just return, and don\u0027t even involve selinux (security_inode_permission() below).",
      "parentUuid": "6599a530_30e07bb2",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 82
      },
      "revId": "bda186a9f59a95f6360b7ba731e01260116d3145",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bdf1f80_9e697b1a",
        "filename": "private/apexd.te",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-10-04T07:08:39Z",
      "side": 1,
      "message": "Nick, I\u0027m submitting this in order to unblock some APEX module developers. Please let me know if you think the explanation I gave above doesn\u0027t make sense; I\u0027m happy to chase it down.",
      "parentUuid": "61dcdfb9_1f82ef3d",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 82
      },
      "revId": "bda186a9f59a95f6360b7ba731e01260116d3145",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c2be999_78fb385a",
        "filename": "private/apexd.te",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2018-10-08T18:59:26Z",
      "side": 1,
      "message": "Can you give me reproduction steps so I can see these denials myself?",
      "parentUuid": "7bdf1f80_9e697b1a",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 82
      },
      "revId": "bda186a9f59a95f6360b7ba731e01260116d3145",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}