{
  "comments": [
    {
      "key": {
        "uuid": "fc88a86f_8819c512",
        "filename": "private/apexd.te",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2018-10-03T21:56:44Z",
      "side": 1,
      "message": "can you please try https://android-review.googlesource.com/c/platform/system/sepolicy/+/777176 instead? SELinux by default generates denials for access() related calls (not just open() related calls). However, we can suppress access() denials without suppressing open() denials.",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 82
      },
      "revId": "bda186a9f59a95f6360b7ba731e01260116d3145",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76ad3d27_977481c2",
        "filename": "private/apexd.te",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-10-03T23:03:14Z",
      "side": 1,
      "message": "That doesn\u0027t seem to fix it, but haven\u0027t had a chance to look into it deeper. When removing these lines again and applying your CL, I get the old denial back:\n\n10-03 23:00:02.506 W/apexd   ( 2588): type\u003d1400 audit(0.0:11): avc: denied { dac_override } for capability\u003d1 scontext\u003du:r:apexd:s0 tcontext\u003du:r:apexd:s0 tclass\u003dcapability permissive\u003d0",
      "parentUuid": "fc88a86f_8819c512",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 82
      },
      "revId": "bda186a9f59a95f6360b7ba731e01260116d3145",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5b86fc5_4580a2ac",
        "filename": "private/apexd.te",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1013030
      },
      "writtenOn": "2018-10-03T23:15:09Z",
      "side": 1,
      "message": "policy does contain it:\n\n$ sesearch --dontaudit $OUT/obj/ETC/sepolicy_intermediates/sepolicy | grep -i cgroup\ndontaudit domain cgroup:file { create audit_access };",
      "parentUuid": "76ad3d27_977481c2",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 82
      },
      "revId": "bda186a9f59a95f6360b7ba731e01260116d3145",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a666769a_182e7929",
        "filename": "private/apexd.te",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2018-10-04T00:08:39Z",
      "side": 1,
      "message": "And you get the same result if you pull the running policy from the device, right? \"adb pull /sys/fs/selinux/policy \u0026\u0026 sesearch --dontaudit -s apexd -t cgroup -p audit_access ./policy\"?\n\nThe problem with checking in dontaudit statements like the one on line 39 is that the tend to make it harder to debug real problems, so their use is discouraged.\n\nIf we really believe this is still an access() issue, can we try this instead:\n\n  dontaudit domain cgroup:{ file dir } audit_access;\n\nas perhaps the access call is triggering on some aspect of the directory, not the file.\n\nI feel like I\u0027m grasping for straws here though. If you wanted to check it in with the dontaudit on line 39, I\u0027d be fine with that. Having said that, I\u0027d really like to understand the root cause of this, not just suppress it.",
      "parentUuid": "f5b86fc5_4580a2ac",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 39,
        "endChar": 82
      },
      "revId": "bda186a9f59a95f6360b7ba731e01260116d3145",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}